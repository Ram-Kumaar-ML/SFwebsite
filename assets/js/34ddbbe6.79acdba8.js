"use strict";(self.webpackChunksf_documentation=self.webpackChunksf_documentation||[]).push([[9951],{3905:function(e,a,n){n.d(a,{Zo:function(){return c},kt:function(){return f}});var t=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function p(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=t.createContext({}),s=function(e){var a=t.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):p(p({},a),e)),n},c=function(e){var a=s(e.components);return t.createElement(l.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},d=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=s(n),f=r,N=d["".concat(l,".").concat(f)]||d[f]||m[f]||i;return n?t.createElement(N,p(p({ref:a},c),{},{components:n})):t.createElement(N,p({ref:a},c))}));function f(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=n.length,p=new Array(i);p[0]=d;var o={};for(var l in a)hasOwnProperty.call(a,l)&&(o[l]=a[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,p[1]=o;for(var s=2;s<i;s++)p[s]=n[s];return t.createElement.apply(null,p)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5018:function(e,a,n){n.r(a),n.d(a,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return c},default:function(){return d}});var t=n(7462),r=n(3366),i=(n(7294),n(3905)),p=["components"],o={},l="Tracing node.js applications",s={unversionedId:"Tracing/nodejs",id:"Tracing/nodejs",isDocsHomePage:!1,title:"Tracing node.js applications",description:"Choose your platform",source:"@site/docs/Tracing/nodejs.md",sourceDirName:"Tracing",slug:"/Tracing/nodejs",permalink:"/docs/Tracing/nodejs",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/Tracing/nodejs.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tracing Ruby Applications",permalink:"/docs/Tracing/ruby"},next:{title:"C",permalink:"/docs/Tracing/csharp"}},c=[{value:"Choose your platform",id:"choose-your-platform",children:[]},{value:"Instance",id:"instance",children:[{value:"Node.JS Express",id:"nodejs-express",children:[]},{value:"Node.JS Script",id:"nodejs-script",children:[]},{value:"Node.JS Sails",id:"nodejs-sails",children:[]}]},{value:"Kubernetes",id:"kubernetes",children:[{value:"Node.JS Express",id:"nodejs-express-1",children:[]},{value:"Node.JS Sails",id:"nodejs-sails-1",children:[]}]},{value:"Docker",id:"docker",children:[{value:"Node.JS Express",id:"nodejs-express-2",children:[]},{value:"Node.JS Sails",id:"nodejs-sails-2",children:[]}]},{value:"ECS",id:"ecs",children:[{value:"Node.JS Express",id:"nodejs-express-3",children:[]},{value:"Node.JS Sails",id:"nodejs-sails-3",children:[]}]},{value:"AWS Lambda",id:"aws-lambda",children:[]}],m={toc:c};function d(e){var a=e.components,n=(0,r.Z)(e,p);return(0,i.kt)("wrapper",(0,t.Z)({},m,n,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"tracing-nodejs-applications"},"Tracing node.js applications"),(0,i.kt)("h3",{id:"choose-your-platform"},"Choose your platform"),(0,i.kt)("h2",{id:"instance"},"Instance"),(0,i.kt)("h3",{id:"nodejs-express"},"Node.JS Express"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install nodejs dependencies and save it in package.json using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"npm install --save elastic-apm-node@^3.20.0\nnpm install --save sf-apm-lib@^1.0.2\n")),(0,i.kt)("p",{parentName:"li"},"or update package.json file with following entries"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'"elastic-apm-node": "^3.20.0"\n"sf-apm-lib": "^1.0.2" \n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"And run \u2018npm install\u2019 to install dependencies"))),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Provide SF_PROJECT_NAME, SF_APP_NAME, SF_PROFILE_KEY as an environment variable in .env file and load it using require('dotenv').config() and access it in code using process.env.<ENV_VAR>")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add initilization code at start of the file "),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Get Snappyflow trace config using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const Snappyflow = require('sf-apm-lib');\nvar sfObj = new Snappyflow(); // Initialize Snappyflow. By default intialization will take profileKey, projectName and appName from sfagent config.yaml. \n\n// Add below part to manually configure the initialization \nlet projectName = process.env.SF_PROJECT_NAME; \nlet appName = process.env.SF_APP_NAME; \nlet profileKey = process.env.SF_PROFILE_KEY; \nsfObj.init(profileKey, projectName, appName); // Manual override\n\nlet sfTraceConfig = sfObj.getTraceConfig(); \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Initialize apm object using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"var apm; \ntry { \n   apm = require('elastic-apm-node').start({ \n         serviceName: '<SERVICE_NAME>', // Specify your service name for tracing \n         serverUrl: sfTraceConfig['SFTRACE_SERVER_URL'], \n         globalLabels: sfTraceConfig['SFTRACE_GLOBAL_LABELS'], \n         verifyServerCert: sfTraceConfig['SFTRACE_VERIFY_SERVER_CERT'] === undefined ? false : sfTraceConfig['SFTRACE_VERIFY_SERVER_CERT'], \n         active: sfTraceConfig['SFTRACE_SERVER_URL'] === undefined ? false : true, \n         stackTraceLimit: sfTraceConfig['SFTRACE_STACK_TRACE_LIMIT'], \n         captureSpanStackTraces: sfTraceConfig['SFTRACE_CAPTURE_SPAN_STACK_TRACES'] \n    }) \n} catch (e) { \n   console.log(e); \n} \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Provide SF_PROJECT_NAME, SF_APP_NAME, SF_PROFILE_KEY as an environment variables in add container section of task definitions. "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html"},"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html")," ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Once your server is up and running you can check trace in Snappyflow Server. "),(0,i.kt)("p",{parentName:"li"},"For viewing trace in Snappyflow server make sure project and app name is created or discovered with project name and app name specified in point no.2 "),(0,i.kt)("p",{parentName:"li"},"Once project and app name is created go to:"),(0,i.kt)("p",{parentName:"li"},"View dashboard -> Click on Tracing on left side bar   -> Click on view transaction -> Go to real time tab ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"For complete code refer sample app refer at:"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/snappyflow/tracing-reference-apps/tree/master/refapp-express"},"https://github.com/snappyflow/tracing-reference-apps/tree/master/refapp-express")," "))))),(0,i.kt)("h3",{id:"nodejs-script"},"Node.JS Script"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install nodejs dependencies and save it in package.json using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"npm install --save elastic-apm-node@^3.20.0  \nnpm install --save sf-apm-lib@^1.0.2 \n")),(0,i.kt)("p",{parentName:"li"},"or update package.json file with following entries: "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'"elastic-apm-node": "^3.20.0" \n"sf-apm-lib": "^1.0.2" \n')),(0,i.kt)("p",{parentName:"li"},"And run \u2018npm install\u2019 to install dependencies")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add initilization code at start of the file"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Get Snappyflow trace config using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const Snappyflow = require('sf-apm-lib'); \nlet projectName = <SF_PROJECT_NAME>; //replace with appropriate project name \nlet appName = <SF_APP_NAME>; //replace with appropriate application name \nlet profileKey = <SF_PROFILE_KEY>; //replace with key copied from SF profile\n\nvar sfObj = new Snappyflow(); \nsfObj.init(profileKey, projectName, appName); \nlet sfTraceConfig = sfObj.getTraceConfig(); \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Initialize apm object using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"var apm;\ntry { \n   apm = require('elastic-apm-node').start({ \n        serviceName: '<SERVICE_NAME>', // Specify service name for tracing \n        serverUrl: sfTraceConfig['SFTRACE_SERVER_URL'], \n        globalLabels: sfTraceConfig['SFTRACE_GLOBAL_LABELS'], \n        verifyServerCert: sfTraceConfig['SFTRACE_VERIFY_SERVER_CERT'] === undefined ? false : sfTraceConfig['SFTRACE_VERIFY_SERVER_CERT'], \n         active: sfTraceConfig['SFTRACE_SERVER_URL'] === undefined ? false : true, \n        stackTraceLimit: sfTraceConfig['SFTRACE_STACK_TRACE_LIMIT'], \n        captureSpanStackTraces: sfTraceConfig['SFTRACE_CAPTURE_SPAN_STACK_TRACES'] \n    }) \n} catch (e) { \n    console.log(e); \n} \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a custom transaction and span within transaction using following code"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"var trans = apm.startTransaction('json transaction', 'reference-app'); \nvar span = apm.startSpan('parse json'); \ntry { \n   JSON.parse('{\"app\": \"test\"}') \n} catch (e) { \n   apm.captureError(e); // Capture the error using apm.captureError(e) method.\n} \n \n// when we've processed, stop the custom span \nif (span) span.end() \n   trans.result = err ? 'error' : 'success'; \n// end the transaction \ntrans.end(); \n")),(0,i.kt)("p",{parentName:"li"},"For more info refer  "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://www.elastic.co/guide/en/apm/agent/nodejs/current/custom-transactions.html"},"https://www.elastic.co/guide/en/apm/agent/nodejs/current/custom-transactions.html")," "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://www.elastic.co/guide/en/apm/agent/nodejs/current/custom-spans.html"},"https://www.elastic.co/guide/en/apm/agent/nodejs/current/custom-spans.html")," ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run you script using node <file_name.js> you should see trace data in Snappyflow server. "),(0,i.kt)("p",{parentName:"li"},"For viewing trace in Snappyflow server make sure project and app name is created or discovered with project name and app name specified in point no.2 "),(0,i.kt)("p",{parentName:"li"},"Once project and app name is created go to: View dashboard -> Click on Tracing on left side bar   -> Click on view transaction -> Go to real time tab ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Refer sample script file at: "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/snappyflow/tracing-reference-apps/blob/master/refapp-"},"https://github.com/snappyflow/tracing-reference-apps/blob/master/refapp-"),"\t\texpress/node_trace_script.js "))))),(0,i.kt)("h3",{id:"nodejs-sails"},"Node.JS Sails"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install nodejs dependencies and save it in package.json using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"npm install --save elastic-apm-node@^3.20.0  \nnpm install --save sf-apm-lib@^1.0.2 \n")),(0,i.kt)("p",{parentName:"li"},"or update package.json file with following entries"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'"elastic-apm-node": "^3.20.0" \n"sf-apm-lib": "^1.0.2" \n')),(0,i.kt)("p",{parentName:"li"},"And run \u2018npm install\u2019 to install dependencies ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Provide SF_PROJECT_NAME, SF_APP_NAME, SF_PROFILE_KEY as an environment variable in .env file and load it using require('dotenv').config() and access it in code using process.env.<ENV_VAR>")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add initilization code at start of the file in globals.js present in config folder."),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Get Snappyflow trace config using:  "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const Snappyflow = require('sf-apm-lib');\n\nvar sfObj = new Snappyflow(); // Initialize Snappyflow. By default intialization will take profileKey, projectName and appName from sfagent config.yaml.\n\n// Add below part to manually configure the initialization \nlet projectName = process.env.SF_PROJECT_NAME; \nlet appName = process.env.SF_APP_NAME; \nlet profileKey = process.env.SF_PROFILE_KEY; \nsfObj.init(profileKey, projectName, appName); // Manual override\n\nlet sfTraceConfig = sfObj.getTraceConfig(); \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Initialize apm object using:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"var apm; \ntry { \n   apm = require('elastic-apm-node').start({ \n        serviceName: '<SERVICE_NAME>', // Specify your service name for tracing \n        serverUrl: sfTraceConfig['SFTRACE_SERVER_URL'], \n        globalLabels: sfTraceConfig['SFTRACE_GLOBAL_LABELS'], \n        verifyServerCert: sfTraceConfig['SFTRACE_VERIFY_SERVER_CERT'] === undefined ? false : sfTraceConfig['SFTRACE_VERIFY_SERVER_CERT'], \n         active: sfTraceConfig['SFTRACE_SERVER_URL'] === undefined ? false : true, \n        stackTraceLimit: sfTraceConfig['SFTRACE_STACK_TRACE_LIMIT'], \n        captureSpanStackTraces: sfTraceConfig['SFTRACE_CAPTURE_SPAN_STACK_TRACES'] \n    }) \n} catch (e) { \n   console.log(e); \n} \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Attach apm object to globals \u2013 This is required so we can use apm variable in other files as part of global sails object. "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"module.exports.globals = { \n   _: require('@sailshq/lodash'), \n   async: false, \n   models: true, \n   sails: true, \n   apm : apm, \n   logger: logger \n}; \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Also add middleware in http.js file present in config folder. Which allows to instrument our code. "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"module.exports.http = { \n   middleware: { \n      order: [ \n         'elasticAPM' \n      ], \n      elasticAPM: (function () { \n         return function (err, req, res, next) { \n            apm.middleware.connect(); \n            if (typeof err !== 'undefined') \n               apm.captureError(err); \n            return next(); \n         }; \n      })()\n   }    \n}; \n"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Once your server is up and running you can check trace in Snappyflow Server. "),(0,i.kt)("p",{parentName:"li"},"For viewing trace in snappyflow server make sure project and app name is created or discovered with project name and app name specified in point no.2 "),(0,i.kt)("p",{parentName:"li"},"Once project and app name is created go to  "),(0,i.kt)("p",{parentName:"li"},"View dashboard -> Click on Tracing on lef side bar -> Click on view transaction -> Go to real time tab ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"For complete code refer sample app refer at: "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/snappyflow/tracing-reference-apps/tree/master/RefappNodeSail"},"https://github.com/snappyflow/tracing-reference-apps/tree/master/RefappNodeSail")," "))),(0,i.kt)("h2",{id:"kubernetes"},"Kubernetes"),(0,i.kt)("h3",{id:"nodejs-express-1"},"Node.JS Express"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install nodejs dependencies and save it in package.json using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"npm install --save elastic-apm-node@^3.20.0  \nnpm install --save sf-apm-lib@^1.0.2 \n")),(0,i.kt)("p",{parentName:"li"},"or update package.json file with following entries: "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'"elastic-apm-node": "^3.20.0"  \n"sf-apm-lib": "^1.0.2" \n')),(0,i.kt)("p",{parentName:"li"},"  And run \u2018npm install\u2019 to install dependencies")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add initilization code at start of the file in app.js"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Get Snappyflow trace config using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const Snappyflow = require('sf-apm-lib'); \nvar sfObj = new Snappyflow(); // Initialize Snappyflow. By default intialization will take profileKey, projectName and appName from sfagent config.yaml.\n\n// Add below part to manually configure the initialization \nlet projectName = process.env.SF_PROJECT_NAME; \nlet appName = process.env.SF_APP_NAME; \nlet profileKey = process.env.SF_PROFILE_KEY; \nsfObj.init(profileKey, projectName, appName); // Manual override\n\nlet sfTraceConfig = sfObj.getTraceConfig(); \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Initialize apm object using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"var apm; \ntry { \n   apm = require('elastic-apm-node').start({ \n      serviceName: '<SERVICE_NAME>', // Specify your service name for tracing \n      serverUrl: sfTraceConfig['SFTRACE_SERVER_URL'], \n      globalLabels: sfTraceConfig['SFTRACE_GLOBAL_LABELS'], \n      verifyServerCert: sfTraceConfig['SFTRACE_VERIFY_SERVER_CERT'] === undefined ? false : sfTraceConfig['SFTRACE_VERIFY_SERVER_CERT'], \n      active: sfTraceConfig['SFTRACE_SERVER_URL'] === undefined ? false : true, \n      stackTraceLimit: sfTraceConfig['SFTRACE_STACK_TRACE_LIMIT'], \n      captureSpanStackTraces: sfTraceConfig['SFTRACE_CAPTURE_SPAN_STACK_TRACES'] \n   }) \n} catch (e) { \n   console.log(e); \n} \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Provide SF_PROJECT_NAME, SF_APP_NAME, SF_PROFILE_KEY as an environment variables in Kubernetes deployment file. "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/"},"https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/")," ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Once your server is up and running you can check trace in Snappyflow Server. "),(0,i.kt)("p",{parentName:"li"},"For viewing trace in Snappyflow server make sure project and app name is created or discovered with project name and app name specified in point no.2 "),(0,i.kt)("p",{parentName:"li"},"Once project and app name is created go to: View dashboard -> Click on Tracing on left side bar   -> Click on view transaction -> Go to real time tab ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"For complete code refer sample app refer at: "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/snappyflow/tracing-reference-apps/tree/master/refapp-express"},"https://github.com/snappyflow/tracing-reference-apps/tree/master/refapp-express")," "))))),(0,i.kt)("h3",{id:"nodejs-sails-1"},"Node.JS Sails"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install nodejs dependencies and save it in package.json using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"npm install --save elastic-apm-node@^3.20.0  \nnpm install --save sf-apm-lib@^1.0.2 \n")),(0,i.kt)("p",{parentName:"li"},"or update package.json file with following entries: "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'"elastic-apm-node": "^3.20.0" \n"sf-apm-lib": "^1.0.2" \n')),(0,i.kt)("p",{parentName:"li"},"And run \u2018npm install\u2019 to install dependencies")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add initilization code at start of the file in globals.js present in config folder. "),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Get Snappyflow trace config using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const Snappyflow = require('sf-apm-lib'); \nvar sfObj = new Snappyflow(); // Initialize Snappyflow. By default intialization will take profileKey, projectName and appName from sfagent config.yaml.\n\n// Add below part to manually configure the initialization \nlet projectName = process.env.SF_PROJECT_NAME; \nlet appName = process.env.SF_APP_NAME; \nlet profileKey = process.env.SF_PROFILE_KEY; \nsfObj.init(profileKey, projectName, appName); // Manual override\n\nlet sfTraceConfig = sfObj.getTraceConfig(); \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Initialize apm object using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"var apm; \ntry { \n   apm = require('elastic-apm-node').start({ \n      serviceName: '<SERVICE_NAME>', // Specify your service name for tracing \n      serverUrl: sfTraceConfig['SFTRACE_SERVER_URL'], \n      globalLabels: sfTraceConfig['SFTRACE_GLOBAL_LABELS'], \n      verifyServerCert: sfTraceConfig['SFTRACE_VERIFY_SERVER_CERT'] === undefined ? false : sfTraceConfig['SFTRACE_VERIFY_SERVER_CERT'], \n      active: sfTraceConfig['SFTRACE_SERVER_URL'] === undefined ? false : true, \n      stackTraceLimit: sfTraceConfig['SFTRACE_STACK_TRACE_LIMIT'], \n      captureSpanStackTraces: sfTraceConfig['SFTRACE_CAPTURE_SPAN_STACK_TRACES'] \n   }) \n} catch (e) { \n   console.log(e); \n} \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Attach apm object to globals \u2013 This is required so we can use apm variable in other files as part of global sails object"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"module.exports.globals = { \n   _: require('@sailshq/lodash'), \n   async: false, \n   models: true, \n   sails: true, \n   apm : apm, \n   logger: logger \n}; \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Also add middleware in http.js file present in config folder. Which allows to instrument our code"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"module.exports.http = {\n   middleware: { \n      order: [ \n         'elasticAPM' \n      ], \n      elasticAPM: (function () { \n         return function (err, req, res, next) { \n         apm.middleware.connect(); \n         if (typeof err !== 'undefined') \n            apm.captureError(err); \n         return next(); \n         }; \n      })() \n   }\n}; \n"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Provide SF_PROJECT_NAME, SF_APP_NAME, SF_PROFILE_KEY as an environment variables in Kubernetes deployment file. "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/"},"https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/")," "),(0,i.kt)("p",{parentName:"li"},"If deploying with helm provide above variables in values.yaml and use them in deployment file of charts. "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://phoenixnap.com/kb/helm-environment-variables"},"https://phoenixnap.com/kb/helm-environment-variables")," ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Once your server is up and running you can check trace in Snappyflow Server. "),(0,i.kt)("p",{parentName:"li"},"For viewing trace in snappyflow server make sure project and app name is created or discovered with project name and app name specified in point no.2 "),(0,i.kt)("p",{parentName:"li"},"Once project and app name is created go to  "),(0,i.kt)("p",{parentName:"li"},"View dashboard -> Click on Tracing on lef side bar -> Click on view transaction -> Go to real time tab ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"For complete code refer sample app refer at: "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/snappyflow/tracing-reference-apps/tree/master/RefappNodeSail"},"https://github.com/snappyflow/tracing-reference-apps/tree/master/RefappNodeSail")," "))),(0,i.kt)("h2",{id:"docker"},"Docker"),(0,i.kt)("h3",{id:"nodejs-express-2"},"Node.JS Express"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install nodejs dependencies and save it in package.json using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-docker"},"RUN npm install --save elastic-apm-node@^3.20.0 \nRUN npm install --save sf-apm-lib@^1.0.2 \n")),(0,i.kt)("p",{parentName:"li"},"or update package.json file with following entries: "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'"elastic-apm-node": "^3.20.0" \n"sf-apm-lib": "^1.0.2" \n')),(0,i.kt)("p",{parentName:"li"}," And run \u2018npm install\u2019 to install dependencies")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add initilization code at start of the file in app.js"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Get Snappyflow trace config using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const Snappyflow = require('sf-apm-lib'); \nvar sfObj = new Snappyflow(); // Initialize Snappyflow. By default intialization will take profileKey, projectName and appName from sfagent config.yaml.\n\n// Add below part to manually configure the initialization \nlet projectName = process.env.SF_PROJECT_NAME; \nlet appName = process.env.SF_APP_NAME; \nlet profileKey = process.env.SF_PROFILE_KEY; \nsfObj.init(profileKey, projectName, appName); // Manual override\n\nlet sfTraceConfig = sfObj.getTraceConfig();\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Initialize apm object using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"var apm; \ntry { \n   apm = require('elastic-apm-node').start({ \n      serviceName: '<SERVICE_NAME>', // Specify your service name for tracing \n      serverUrl: sfTraceConfig['SFTRACE_SERVER_URL'], \n      globalLabels: sfTraceConfig['SFTRACE_GLOBAL_LABELS'], \n      verifyServerCert: sfTraceConfig['SFTRACE_VERIFY_SERVER_CERT'] === undefined ? false : sfTraceConfig['SFTRACE_VERIFY_SERVER_CERT'], \n      active: sfTraceConfig['SFTRACE_SERVER_URL'] === undefined ? false : true, \n      stackTraceLimit: sfTraceConfig['SFTRACE_STACK_TRACE_LIMIT'], \n      captureSpanStackTraces: sfTraceConfig['SFTRACE_CAPTURE_SPAN_STACK_TRACES'] \n   }) \n} catch (e) { \n   console.log(e); \n} \n"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Provide SF_PROJECT_NAME, SF_APP_NAME, SF_PROFILE_KEY as an environment variables in docker-compose.yml or docker stack deployment file or at command line when using docker run command for deployment. "),(0,i.kt)("p",{parentName:"li"},"Eg: "),(0,i.kt)("p",{parentName:"li"},"Docker-compose and stack: ",(0,i.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/environment-variables/"},"https://docs.docker.com/compose/environment-variables/")," "),(0,i.kt)("p",{parentName:"li"},"Docker run cli command: "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-docker"},"docker run -d -t -i -e SF_PROJECT_NAME='<Project name>' \\  \n-e SF_APP_NAME='<SF_APP_NAME>' \\ \n-e SF_PROFILE_KEY='<snappyflow profile key>' \\ \n--name <container_name>  <dockerhub_id/image_name> \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Once your server is up and running you can check trace in Snappyflow Server. "),(0,i.kt)("p",{parentName:"li"},"// Project related info "),(0,i.kt)("p",{parentName:"li"},"For viewing trace in Snappyflow server make sure project and app name is created or discovered with project name and app name specified in point no.2 "),(0,i.kt)("p",{parentName:"li"},"Once project and app name is created go to  "),(0,i.kt)("p",{parentName:"li"},"View dashboard -> Click on Tracing on lef side bar -> Click on view transaction -> Go to real time tab ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"For complete code refer sample app refer at: "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/snappyflow/tracing-reference-apps/tree/master/refapp-express"},"https://github.com/snappyflow/tracing-reference-apps/tree/master/refapp-express")," "))),(0,i.kt)("h3",{id:"nodejs-sails-2"},"Node.JS Sails"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install nodejs dependencies and save it in package.json using "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-docker"},"RUN npm install --save elastic-apm-node@^3.20.0 \nRUN npm install --save sf-apm-lib@^1.0.2 \n")),(0,i.kt)("p",{parentName:"li"},"or update package.json file with following entries:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'"elastic-apm-node": "^3.20.0" \n"sf-apm-lib": "^1.0.2" \n')),(0,i.kt)("p",{parentName:"li"}," And run \u2018npm install\u2019 to install dependencies")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add initilization code at start of the file in globals.js present in config folder. "),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Get Snappyflow trace config using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const Snappyflow = require('sf-apm-lib'); \nvar sfObj = new Snappyflow(); // Initialize Snappyflow. By default intialization will take profileKey, projectName and appName from sfagent config.yaml.\n\n// Add below part to manually configure the initialization \nlet projectName = process.env.SF_PROJECT_NAME; \nlet appName = process.env.SF_APP_NAME; \nlet profileKey = process.env.SF_PROFILE_KEY; \nsfObj.init(profileKey, projectName, appName); // Manual override\n\nlet sfTraceConfig = sfObj.getTraceConfig(); \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Initialize apm object using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"var apm; \ntry { \n   apm = require('elastic-apm-node').start({ \n      serviceName: '<SERVICE_NAME>', // Specify your service name for tracing \n      serverUrl: sfTraceConfig['SFTRACE_SERVER_URL'], \n      globalLabels: sfTraceConfig['SFTRACE_GLOBAL_LABELS'], \n      verifyServerCert: sfTraceConfig['SFTRACE_VERIFY_SERVER_CERT'] === undefined ? false : sfTraceConfig['SFTRACE_VERIFY_SERVER_CERT'], \n      active: sfTraceConfig['SFTRACE_SERVER_URL'] === undefined ? false : true, \n      stackTraceLimit: sfTraceConfig['SFTRACE_STACK_TRACE_LIMIT'], \n      captureSpanStackTraces: sfTraceConfig['SFTRACE_CAPTURE_SPAN_STACK_TRACES'] \n   }) \n} catch (e) { \n   console.log(e); \n} \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Attach apm object to globals \u2013 This is required so we can use apm variable in other files as part of global sails object. "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"module.exports.globals = { \n   _: require('@sailshq/lodash'), \n   async: false, \n   models: true, \n   sails: true, \n   apm : apm, \n   logger: logger \n}; \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Also add middleware in http.js file present in config folder. Which allows to instrument our code. "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"module.exports.http = { \n   middleware: { \n      order: [ \n         'elasticAPM' \n      ], \n      elasticAPM: (function () {  \n         return function (err, req, res, next) { \n         apm.middleware.connect(); \n         if (typeof err !== 'undefined') \n            apm.captureError(err); \n         return next(); \n         }; \n      })() \n   } \n}; \n"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Provide SF_PROJECT_NAME, SF_APP_NAME, SF_PROFILE_KEY as an environment variables in docker-compose.yml or docker stack deployment file or at command line when using docker run command for deployment. "),(0,i.kt)("p",{parentName:"li"},"Eg: "),(0,i.kt)("p",{parentName:"li"},"Docker-compose and stack: ",(0,i.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/environment-variables/"},"https://docs.docker.com/compose/environment-variables/")," "),(0,i.kt)("p",{parentName:"li"},"Docker run cli command: "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-docker"},"docker run -d -t -i -e SF_PROJECT_NAME='<SF_PROJECT_NAME>' \\  \n-e SF_APP_NAME='<SF_APP_NAME>' \\ \n-e SF_PROFILE_KEY='<snappyflow profile key>' \\ \n--name <container_name>  <dockerhub_id/image_name> \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Once your server is up and running you can check trace in Snappyflow Server. "),(0,i.kt)("p",{parentName:"li"},"For viewing trace in snappyflow server make sure project and app name is created or discovered with project name and app name specified in point no.2 "),(0,i.kt)("p",{parentName:"li"},"Once project and app name is created go to "),(0,i.kt)("p",{parentName:"li"},"View dashboard -> Click on Tracing on lef side bar -> Click on view transaction -> Go to real time tab ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"For complete code refer sample app refer at: "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/snappyflow/tracing-reference-apps/tree/master/RefappNodeSail"},"https://github.com/snappyflow/tracing-reference-apps/tree/master/RefappNodeSail")," "))),(0,i.kt)("h2",{id:"ecs"},"ECS"),(0,i.kt)("h3",{id:"nodejs-express-3"},"Node.JS Express"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install nodejs dependencies and save it in package.json using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"npm install --save elastic-apm-node@^3.20.0 \nnpm install --save sf-apm-lib@^1.0.2 \n")),(0,i.kt)("p",{parentName:"li"},"or update package.json file with following entries"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'"elastic-apm-node": "^3.20.0" \n"sf-apm-lib": "^1.0.2" \n')),(0,i.kt)("p",{parentName:"li"},"And run \u2018npm install\u2019 to install dependencies ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add initilization code at start of the file in app.js"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Get Snappyflow trace config using:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const Snappyflow = require('sf-apm-lib'); \nvar sfObj = new Snappyflow(); // Initialize Snappyflow. By default intialization will take profileKey, projectName and appName from sfagent config.yaml.\n\n// Add below part to manually configure the initialization \nlet projectName = process.env.SF_PROJECT_NAME; \nlet appName = process.env.SF_APP_NAME; \nlet profileKey = process.env.SF_PROFILE_KEY; \nsfObj.init(profileKey, projectName, appName); // Manual override\n\nlet sfTraceConfig = sfObj.getTraceConfig(); \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Initialize apm object using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"var apm; \ntry { \n   apm = require('elastic-apm-node').start({ \n      serviceName: '<SERVICE_NAME>', // Specify your service name for tracing \n      serverUrl: sfTraceConfig['SFTRACE_SERVER_URL'], \n      globalLabels: sfTraceConfig['SFTRACE_GLOBAL_LABELS'], \n      verifyServerCert: sfTraceConfig['SFTRACE_VERIFY_SERVER_CERT'] === undefined ? false : sfTraceConfig['SFTRACE_VERIFY_SERVER_CERT'], \n      active: sfTraceConfig['SFTRACE_SERVER_URL'] === undefined ? false : true, \n      stackTraceLimit: sfTraceConfig['SFTRACE_STACK_TRACE_LIMIT'], \n      captureSpanStackTraces: sfTraceConfig['SFTRACE_CAPTURE_SPAN_STACK_TRACES'] \n   }) \n} catch (e) { \n   console.log(e); \n} \n"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Provide SF_PROJECT_NAME, SF_APP_NAME, SF_PROFILE_KEY as an environment variables in add container section of task definitions. "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html"},"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html")," ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Once your server is up and running you can check trace in Snappyflow Server. "),(0,i.kt)("p",{parentName:"li"},"For viewing trace in Snappyflow server make sure project and app name is created or discovered with project name and app name specified in point no.2 "),(0,i.kt)("p",{parentName:"li"},"Once project and app name is created go to: View dashboard -> Click on Tracing on left side bar   -> Click on view transaction -> Go to real time tab ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"For complete code refer sample app refer at: "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/snappyflow/tracing-reference-apps/tree/master/refapp-express"},"https://github.com/snappyflow/tracing-reference-apps/tree/master/refapp-express")," "))),(0,i.kt)("h3",{id:"nodejs-sails-3"},"Node.JS Sails"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install nodejs dependencies and save it in package.json using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"npm install --save elastic-apm-node@^3.20.0  \nnpm install --save sf-apm-lib@^1.0.2 \n")),(0,i.kt)("p",{parentName:"li"},"or update package.json file with following entries"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'"elastic-apm-node": "^3.20.0" \n"sf-apm-lib": "^1.0.2" \n')),(0,i.kt)("p",{parentName:"li"},"And run \u2018npm install\u2019 to install dependencies ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add initilization code at start of the file in globals.js present in config folder. "),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Get Snappyflow trace config using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const Snappyflow = require('sf-apm-lib'); \nvar sfObj = new Snappyflow(); // Initialize Snappyflow. By default intialization will take profileKey, projectName and appName from sfagent config.yaml.\n\n// Add below part to manually configure the initialization \nlet projectName = process.env.SF_PROJECT_NAME; \nlet appName = process.env.SF_APP_NAME; \nlet profileKey = process.env.SF_PROFILE_KEY; \nsfObj.init(profileKey, projectName, appName); // Manual override\n\nlet sfTraceConfig = sfObj.getTraceConfig(); \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Initialize apm object using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"var apm; \ntry { \n   apm = require('elastic-apm-node').start({ \n      serviceName: '<SERVICE_NAME>', // Specify your service name for tracing \n      serverUrl: sfTraceConfig['SFTRACE_SERVER_URL'], \n      globalLabels: sfTraceConfig['SFTRACE_GLOBAL_LABELS'], \n      verifyServerCert: sfTraceConfig['SFTRACE_VERIFY_SERVER_CERT'] === undefined ? false : sfTraceConfig['SFTRACE_VERIFY_SERVER_CERT'], \n      active: sfTraceConfig['SFTRACE_SERVER_URL'] === undefined ? false : true, \n      stackTraceLimit: sfTraceConfig['SFTRACE_STACK_TRACE_LIMIT'], \n      captureSpanStackTraces: sfTraceConfig['SFTRACE_CAPTURE_SPAN_STACK_TRACES'] \n   }) \n} catch (e) { \n   console.log(e); \n} \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Attach apm object to globals \u2013 This is required so we can use apm variable in other files as part of global sails object"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"module.exports.globals = { \n   _: require('@sailshq/lodash'), \n   async: false, \n   models: true, \n   sails: true, \n   apm : apm, \n   logger: logger \n}; \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Also add middleware in http.js file present in config folder. Which allows to instrument our code"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"module.exports.http = { \n   middleware: { \n      order: [ \n         'elasticAPM' \n      ], \n      elasticAPM: (function () { \n         return function (err, req, res, next) { \n            apm.middleware.connect(); \n            if (typeof err !== 'undefined') \n               apm.captureError(err); \n            return next(); \n         }; \n      })() \n   } \n}; \n"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Provide SF_PROJECT_NAME, SF_APP_NAME, SF_PROFILE_KEY as an environment variables in add container section of task definitions. "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html"},"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html")," ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Once your server is up and running you can check trace in Snappyflow Server. "),(0,i.kt)("p",{parentName:"li"},"For viewing trace in snappyflow server make sure project and app name is created or discovered with project name and app name specified in point no.2 "),(0,i.kt)("p",{parentName:"li"},"Once project and app name is created go to  "),(0,i.kt)("p",{parentName:"li"},"View dashboard -> Click on Tracing on lef side bar -> Click on view transaction -> Go to real time tab ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"For complete code refer sample app refer at: "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/snappyflow/tracing-reference-apps/tree/master/RefappNodeSail"},"https://github.com/snappyflow/tracing-reference-apps/tree/master/RefappNodeSail")," "))),(0,i.kt)("h2",{id:"aws-lambda"},"AWS Lambda"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install dependency libraries in the node_modules directory using the\u202fnpm install\u202fcommand"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"npm install sf-apm-lib@^1.0.2 \nnpm install elastic-apm-node@^3.20.0 \n")),(0,i.kt)("p",{parentName:"li"},"Ref: ",(0,i.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/lambda/latest/dg/nodejs-package.html"},"https://docs.aws.amazon.com/lambda/latest/dg/nodejs-package.html")," ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Instrument lambda function to enable tracing "),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add code outside lambda handler method to get tracing config and create trace client "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// SnappyFlow Tracing config \nconst Snappyflow = require('sf-apm-lib');\n\nlet projectName = process.env.SF_PROJECT_NAME; \nlet appName = process.env.SF_APP_NAME; \nlet profileKey = process.env.SF_PROFILE_KEY; \n\nvar sfObj = new Snappyflow(); \nsfObj.init(profileKey, projectName, appName); \n\nvar apm; \ntry { \n   var sfTraceConfig = sfObj.getTraceConfig(); \n   apm = require('elastic-apm-node').start({ \n      serviceName: '<SERVICE_NAME_CHANGEME>', \n      serverUrl: sfTraceConfig['SFTRACE_SERVER_URL'], \n      globalLabels: sfTraceConfig['SFTRACE_GLOBAL_LABELS'], \n      verifyServerCert: sfTraceConfig['SFTRACE_VERIFY_SERVER_CERT'] === undefined ? false : sfTraceConfig['SFTRACE_VERIFY_SERVER_CERT'], \n      active: sfTraceConfig['SFTRACE_SERVER_URL'] === undefined ? false : true, \n      stackTraceLimit: sfTraceConfig['SFTRACE_STACK_TRACE_LIMIT'], \n      captureSpanStackTraces: sfTraceConfig['SFTRACE_CAPTURE_SPAN_STACK_TRACES'], \n      captureBody: 'all' \n  }) \n} catch (e) { \n   console.log(e) \n} \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add custom instrumentation inside lambda handler method "),(0,i.kt)("p",{parentName:"li"},"Ref: ",(0,i.kt)("a",{parentName:"p",href:"https://www.elastic.co/guide/en/apm/agent/nodejs/current/custom-transactions.html"},"https://www.elastic.co/guide/en/apm/agent/nodejs/current/custom-transactions.html")," "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://www.elastic.co/guide/en/apm/agent/nodejs/current/custom-spans.html"},"https://www.elastic.co/guide/en/apm/agent/nodejs/current/custom-spans.html")," "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// Create custom transaction \nvar trans = apm.startTransaction('lambda handler', 'lambda');  \n//Create custom span is needed \nvar span = apm.startSpan('parse json'); \n// your CODE here \n// End of span \nif (span) span.end() \n//Some more code part of the transaction or add more spans here. Don\u2019t RETURN/EXIT  //end custom transaction \ntrans.result = 'success'; \ntrans.end();     \n// RETURN code \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Deploy the lambda app. Follow README to test sample app "),(0,i.kt)("p",{parentName:"li"},"Reference app: "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/upendrasahu/aws-lambda-nodejs-tracing-sample"},"https://github.com/upendrasahu/aws-lambda-nodejs-tracing-sample"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Configure Lambda function before trigger/invoke. "),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add the environment variable\u202fSF_PROFILE_KEY\u202fand set the value to your\u202fprofile key copied from SnappyFlow. ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add environment variables SF_APP_NAME and SF_PROJECT_NAME with appropriate values. Create this Project and Application in SnappyFlow if not already present. "),(0,i.kt)("img",{src:"images\\nodejs_lambda_1.png"})))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"At this point you can trigger lambda function and get tracing data in SnappyFlow."))))))}d.isMDXComponent=!0}}]);