"use strict";(self.webpackChunksf_documentation=self.webpackChunksf_documentation||[]).push([[8857],{3905:function(e,n,a){a.d(n,{Zo:function(){return c},kt:function(){return m}});var t=a(7294);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var p=t.createContext({}),s=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},c=function(e){var n=s(e.components);return t.createElement(p.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(a),m=o,d=u["".concat(p,".").concat(m)]||u[m]||g[m]||r;return a?t.createElement(d,l(l({ref:n},c),{},{components:a})):t.createElement(d,l({ref:n},c))}));function m(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=a.length,l=new Array(r);l[0]=u;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<r;s++)l[s]=a[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},6446:function(e,n,a){a.r(n),a.d(n,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var t=a(7462),o=a(3366),r=(a(7294),a(3905)),l=["components"],i={},p="Centralized Logging of Application Pod Logs",s={unversionedId:"New_pages/centralized_logging_of_application_pod_logs",id:"New_pages/centralized_logging_of_application_pod_logs",isDocsHomePage:!1,title:"Centralized Logging of Application Pod Logs",description:"Overview",source:"@site/docs/New_pages/centralized_logging_of_application_pod_logs.md",sourceDirName:"New_pages",slug:"/New_pages/centralized_logging_of_application_pod_logs",permalink:"/docs/New_pages/centralized_logging_of_application_pod_logs",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/New_pages/centralized_logging_of_application_pod_logs.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"sfKubeAgent Installation",permalink:"/docs/New_pages/sfkubeagent_installation"},next:{title:"Monitoring Windows Instances",permalink:"/docs/New_pages/sfagent_windows"}},c=[{value:"Overview",id:"overview",children:[]},{value:"Procedure for Centralized Logging",id:"procedure-for-centralized-logging",children:[]},{value:"How to tag application Pods with project and application name labels",id:"how-to-tag-application-pods-with-project-and-application-name-labels",children:[{value:"Running Pods",id:"running-pods",children:[]},{value:"Automatically apply labels to new Pods",id:"automatically-apply-labels-to-new-pods",children:[]}]},{value:"Example",id:"example",children:[{value:"Centralized logging for nginx-access logs",id:"centralized-logging-for-nginx-access-logs",children:[]}]}],g={toc:c};function u(e){var n=e.components,a=(0,o.Z)(e,l);return(0,r.kt)("wrapper",(0,t.Z)({},g,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"centralized-logging-of-application-pod-logs"},"Centralized Logging of Application Pod Logs"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"SnappyFlow can collect & parse application logs from pods in 2 ways: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Collect logs locally by running sfKubeAgent as a sidecar container inside application pod "),(0,r.kt)("li",{parentName:"ul"},"Collect logs centrally through sfPod, which is explained in this page ")),(0,r.kt)("h2",{id:"procedure-for-centralized-logging"},"Procedure for Centralized Logging"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"User runs a busybox sidecar container in the application pod with log files mounted to the container. Busybox tails & streams the application logs to stdout ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Add SnappyFlow labels: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"snappyflow/projectName")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"snappyflow/appName"),": These are mandatory labels for SnappyFlow monitoring. sfPod collects logs only from pods that have these labels and collected logs are organized under projectName/appName hierarchy in SnappyFlow "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"snappyflow/component"),": This label is used to signal to sfPod on which parser to apply to parse the logs. List of standard parsers packaged with sfPod. If no label is present, sfPod will apply SnappyFlow\u2019s generic parser which collects the whole log line as a message. "))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"sfPod runs as daemon-set in all the Kubernetes data nodes. It picks up logs from stdout of tagged pods, parses the logs based on component tag and ships parsed logs to SnappyFlow under projectName/appName hierarchy. "))),(0,r.kt)("h2",{id:"how-to-tag-application-pods-with-project-and-application-name-labels"},"How to tag application Pods with project and application name labels"),(0,r.kt)("h3",{id:"running-pods"},"Running Pods"),(0,r.kt)("p",null,"Use the following kubectl commands to tag your application pods with the appropriate tags:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"kubectl label pods <pod_name> snappyflow/projectname=<project_name> --namespace <appnamespace>\nkubectl label pods <pod_name> snappyflow/appname=<app_name> --namespace <appnamespace>\n")),(0,r.kt)("h3",{id:"automatically-apply-labels-to-new-pods"},"Automatically apply labels to new Pods"),(0,r.kt)("p",null,"To automatically apply right labels for new pods which get created due to various reasons such as upgrade, restarts etc. apply labels to pod templates. If you are using helm chart, best practice is to define labels in values.yaml and use these labels parameter in pod template section of Deployment, StatefulSet, Daemonset or other Kubernetes controller."),(0,r.kt)("p",null,"Below is one example values.yaml"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: sfapm-ui\n  labels:\n    app: sfapm\n    role: ui\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: sfapm\n      role: ui\n  template:\n    metadata:\n      labels:\n        app: sfapm\n        role: ui\n        snappyflow/appname: demo-application\n        snappyflow/projectname: demo-project\n")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("h3",{id:"centralized-logging-for-nginx-access-logs"},"Centralized logging for nginx-access logs"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Configure Nginx to drop logs in the required format in /var/log/nginx folder using config map ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Add busy box container to tail logs from access logs and stream to stdout ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Signal to sfPod to use \u201cnginx\u201d parser using label \u201ccomponent\u201d "))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Nginx Pod YAML")," "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'kind: Pod \napiVersion: v1 \nmetadata: \n name: my-first-pod \n labels: \n  snappyflow/appname: <app_name> \n  snappyflow/projectname: <project_name> \n  snappyflow/component: nginx \nspec: \n containers: \n - name: nginx-container \n   image: nginx:latest \n   imagePullPolicy: IfNotPresent \n   ports: \n   - name: http \n     containerPort: 80 \n     protocol: TCP \n   volumeMounts: \n   - name: varlog \n     mountPath: /var/log/nginx \n   - name: nginx-config \n     mountPath: /etc/nginx/nginx.conf \n     subPath: nginx.conf \n - name: busybox-container \n   image: busybox \n   command: ["/bin/sh", "-c"] \n   args: ["tail -n+1 -f /var/log/nginx/access1.log"] \n   volumeMounts: \n   - name: varlog \n     mountPath: /var/log/nginx \n volumes: \n - name: nginx-config \n   configMap: \n     name: nginx-config \n - name: varlog \n   emptyDir: {} \n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Config map for Nginx configuration")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1 \nkind: ConfigMap \nmetadata: \n  name: nginx-configmap \n  labels: \n    snappyflow/appname: <app_name> \n    snappyflow/projectname: <project_name> \ndata: \n  nginx.conf: | \n    worker_processes  5; \n    events { \n        worker_connections  4096; \n    } \n    http { \n        default_type application/octet-stream; \n        log_format upstream_time  '$remote_addr:$remote_port $remote_user [$time_local] ' \n                       '\"$request\" $status $body_bytes_sent ' \n                       '\"$http_referer\" \"$http_user_agent\" \"$http_referer\" ' \n                       'rt=$request_time uct=$upstream_connect_time uht=$upstream_header_time urt=$upstream_response_time'; \n        server { \n            listen          80; \n            error_log /var/log/nginx/error1.log; \n            access_log /var/log/nginx/access1.log upstream_time; \n            location /nginx_status { \n                stub_status; \n            } \n        } \n    } \n")))}u.isMDXComponent=!0}}]);