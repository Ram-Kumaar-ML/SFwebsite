"use strict";(self.webpackChunksf_documentation=self.webpackChunksf_documentation||[]).push([[945],{3905:function(e,n,a){a.d(n,{Zo:function(){return c},kt:function(){return d}});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function p(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=t.createContext({}),s=function(e){var n=t.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):p(p({},n),e)),a},c=function(e){var n=s(e.components);return t.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},_=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),_=s(a),d=r,f=_["".concat(l,".").concat(d)]||_[d]||m[d]||i;return a?t.createElement(f,p(p({ref:n},c),{},{components:a})):t.createElement(f,p({ref:n},c))}));function d(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,p=new Array(i);p[0]=_;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,p[1]=o;for(var s=2;s<i;s++)p[s]=a[s];return t.createElement.apply(null,p)}return t.createElement.apply(null,a)}_.displayName="MDXCreateElement"},8305:function(e,n,a){a.r(n),a.d(n,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return c},default:function(){return _}});var t=a(7462),r=a(3366),i=(a(7294),a(3905)),p=["components"],o={},l="Tracing Python Applications",s={unversionedId:"Tracing/python",id:"Tracing/python",isDocsHomePage:!1,title:"Tracing Python Applications",description:"Available Platforms",source:"@site/docs/Tracing/python.md",sourceDirName:"Tracing",slug:"/Tracing/python",permalink:"/docs/Tracing/python",editUrl:"https://github.com/ram-dot-kumar/SFwebsite.git/docs/Tracing/python.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tracing Java Applications",permalink:"/docs/Tracing/java"},next:{title:"Tracing Ruby Applications",permalink:"/docs/Tracing/ruby"}},c=[{value:"Instances",id:"instances",children:[{value:"Django",id:"django",children:[]},{value:"Flask",id:"flask",children:[]},{value:"Script",id:"script",children:[]},{value:"Celery",id:"celery",children:[]}]},{value:"Kubernetes",id:"kubernetes",children:[{value:"Django",id:"django-1",children:[]},{value:"Flask",id:"flask-1",children:[]},{value:"Celery",id:"celery-1",children:[]}]},{value:"Docker",id:"docker",children:[{value:"Django",id:"django-2",children:[]},{value:"Flask",id:"flask-2",children:[]},{value:"Celery",id:"celery-2",children:[]}]},{value:"ECS",id:"ecs",children:[{value:"Django",id:"django-3",children:[]},{value:"Flask",id:"flask-3",children:[]},{value:"Celery",id:"celery-3",children:[]}]},{value:"AWS Lambda",id:"aws-lambda",children:[{value:"Script",id:"script-1",children:[]}]},{value:"Log Correlation",id:"log-correlation",children:[{value:"For enabling log correlation, follow below instructions",id:"for-enabling-log-correlation-follow-below-instructions",children:[]},{value:"Django",id:"django-4",children:[]},{value:"Flask",id:"flask-4",children:[]}]}],m={toc:c};function _(e){var n=e.components,o=(0,r.Z)(e,p);return(0,i.kt)("wrapper",(0,t.Z)({},m,o,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"tracing-python-applications"},"Tracing Python Applications"),(0,i.kt)("h4",{id:"available-platforms"},"Available Platforms"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"python#instances"},"Instances"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"python#docker"},"Docker"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"python#kubernetes"},"Kubernetes"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"python#ecs"},"ECS"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"python#aws-lambda"},"AWS Lambda"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"For Log Correlation, scroll to the bottom of this page or ",(0,i.kt)("a",{parentName:"strong",href:"#log-correlation"},"click here"))),(0,i.kt)("h2",{id:"instances"},"Instances"),(0,i.kt)("h3",{id:"django"},"Django"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"sf-elastic-apm==6.3.4\nsf-apm-lib==0.1.1\n")),(0,i.kt)("p",{parentName:"li"},"entries in requirements.txt file and install these in your project environment "),(0,i.kt)("p",{parentName:"li"},"or "),(0,i.kt)("p",{parentName:"li"},"Install through CLI using "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"pip install sf-elastic-apm==6.3.4 \npip install sf-apm-lib==0.1.1 \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Provide ",(0,i.kt)("inlineCode",{parentName:"p"},"SF_PROJECT_NAME"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SF_APP_NAME"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SF_PROFILE_KEY")," as an environment variable. ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add following entries in settings.py"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add import statement "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from sf_apm_lib.snappyflow import Snappyflow \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add following entry in ",(0,i.kt)("inlineCode",{parentName:"p"},"INSTALLED_APPS")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"'elasticapm.contrib.django'\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add following entry in ",(0,i.kt)("inlineCode",{parentName:"p"},"MIDDLEWARE")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"'elasticapm.contrib.django.middleware.TracingMiddleware'\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add this entry for instrumenting Django app"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"try: \n   sf = Snappyflow() # Initialize Snappyflow. By default intialization will take profileKey, projectName and appName from sfagent config.yaml \n   # Add below part to manually configure the initialization \n   SF_PROJECT_NAME = os.getenv('SF_PROJECT_NAME') \n   SF_APP_NAME = os.getenv('SF_APP_NAME') \n   SF_PROFILE_KEY = os.getenv('SF_PROFILE_KEY') \n   sf.init(SF_PROFILE_KEY, SF_PROJECT_NAME, SF_APP_NAME) \n   # End of manual configuration \n   SFTRACE_CONFIG = sf.get_trace_config()\n\n   # Start Trace to log feature section\n   # Add below line of code to enable Trace to log feature:\n   sfTraceConfig['SFTRACE_GLOBAL_LABELS'] += ',_tag_redact_body=true'\n   # Option Configs for trace to log\n   # Add below line to provide custom documentType (Default:\"user-input\"):\n   sfTraceConfig['SFTRACE_GLOBAL_LABELS'] += ',_tag_documentType=<document-type>'\n   # Add below line to provide destination index (Default:\"log\"):\n   sfTraceConfig['SFTRACE_GLOBAL_LABELS'] += ',_tag_IndexType=<index-type>' # Applicable values(log, metric)\n   # End trace to log section\n\n   ELASTIC_APM={ \n      'SERVICE_NAME': \"<Service name>\" , # Specify your service name for tracing \n      'SERVER_URL': SFTRACE_CONFIG.get('SFTRACE_SERVER_URL'), \n      'GLOBAL_LABELS': SFTRACE_CONFIG.get('SFTRACE_GLOBAL_LABELS'), \n      'VERIFY_SERVER_CERT': SFTRACE_CONFIG.get('SFTRACE_VERIFY_SERVER_CERT'), \n      'SPAN_FRAMES_MIN_DURATION': SFTRACE_CONFIG.get('SFTRACE_SPAN_FRAMES_MIN_DURATION'), \n      'STACK_TRACE_LIMIT': SFTRACE_CONFIG.get('SFTRACE_STACK_TRACE_LIMIT'), \n      'CAPTURE_SPAN_STACK_TRACES': SFTRACE_CONFIG.get('SFTRACE_CAPTURE_SPAN_STACK_TRACES'), \n      'DJANGO_TRANSACTION_NAME_FROM_ROUTE': True, \n      'CENTRAL_CONFIG': False, \n      'DEBUG': True,\n      'METRICS_INTERVAL': '0s'\n   } \nexcept Exception as error: \n   print(\"Error while fetching snappyflow tracing configurations\", error) \n"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Once your server is up and running you can check trace in Snappyflow Server. "),(0,i.kt)("p",{parentName:"li"},"For viewing trace in snappyflow server make sure project and app name is created or discovered with project name and app name specified in point no.2 "),(0,i.kt)("p",{parentName:"li"},"Once project and app name is created go to View dashboard -> Click on Tracing on lef side bar -> Click on view transaction -> Go to real time tab ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"For complete code refer sample app refer at: "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/snappyflow/tracing-reference-apps/tree/master/refapp-django"},"https://github.com/snappyflow/tracing-reference-apps/tree/master/refapp-django"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("b",null,"Note"),": ",(0,i.kt)("i",null," 'CAPTURE_BODY':'all' config should be present in apm agent code instrumentation for Trace to Log feature. "))),(0,i.kt)("h3",{id:"flask"},"Flask"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"sf-elastic-apm[flask]==6.3.4\nsf-apm-lib==0.1.1\n")),(0,i.kt)("p",{parentName:"li"},"entries in requirements.txt file and install these in your project environment "),(0,i.kt)("p",{parentName:"li"},"or "),(0,i.kt)("p",{parentName:"li"},"Install through CLI using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"pip install sf-elastic-apm[flask]==6.3.4 \npip install sf-apm-lib==0.1.1 \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Provide ",(0,i.kt)("inlineCode",{parentName:"p"},"SF_PROJECT_NAME"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SF_APP_NAME"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SF_PROFILE_KEY")," as an environment variable. ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add following entries in ",(0,i.kt)("inlineCode",{parentName:"p"},"app.py")," "),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add imports statement"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from elasticapm.contrib.flask import ElasticAPM \nfrom sf_apm_lib.snappyflow import Snappyflow \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Get trace config"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"sf = Snappyflow() # Initialize Snappyflow. By default intialization will take profileKey, projectName and appName from sfagent config.yaml\n\n# Add below part to manually configure the initialization \nSF_PROJECT_NAME = os.getenv('SF_PROJECT_NAME') \nSF_APP_NAME = os.getenv('SF_APP_NAME') \nSF_PROFILE_KEY = os.getenv('SF_PROFILE_KEY') \nsf.init(SF_PROFILE_KEY, SF_PROJECT_NAME, SF_APP_NAME) \n# End of manual configuration\n\nSFTRACE_CONFIG = sf.get_trace_config()\n\n# Start Trace to log feature section\n# Add below line of code to enable Trace to log feature:\nsfTraceConfig['SFTRACE_GLOBAL_LABELS'] += ',_tag_redact_body=true'\n# Option Configs for trace to log\n# Add below line to provide custom documentType (Default:\"user-input\"):\nsfTraceConfig['SFTRACE_GLOBAL_LABELS'] += ',_tag_documentType=<document-type>'\n# Add below line to provide destination index (Default:\"log\"):\nsfTraceConfig['SFTRACE_GLOBAL_LABELS'] += ',_tag_IndexType=<index-type>' # Applicable values(log, metric)\n# End trace to log section\n\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Initialize elastic apm and instrument it to flask app"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"app.config['ELASTIC_APM'] = { \n    'SERVICE_NAME': '<SERVICE_NAME>', # Specify your service name for tracing \n    'SERVER_URL': SFTRACE_CONFIG.get('SFTRACE_SERVER_URL'), \n    'GLOBAL_LABELS': SFTRACE_CONFIG.get('SFTRACE_GLOBAL_LABELS'), \n    'VERIFY_SERVER_CERT': SFTRACE_CONFIG.get('SFTRACE_VERIFY_SERVER_CERT'), \n    'SPAN_FRAMES_MIN_DURATION': SFTRACE_CONFIG.get('SFTRACE_SPAN_FRAMES_MIN_DURATION'), \n    'STACK_TRACE_LIMIT': SFTRACE_CONFIG.get('SFTRACE_STACK_TRACE_LIMIT'), \n    'CAPTURE_SPAN_STACK_TRACES': SFTRACE_CONFIG.get('SFTRACE_CAPTURE_SPAN_STACK_TRACES'), \n    'DEBUG': True,\n    'METRICS_INTERVAL': '0s'\n} \napm = ElasticAPM(app) \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Once your server is up and running you can check trace in Snappyflow Server. "),(0,i.kt)("p",{parentName:"li"},"For viewing trace in snappyflow server make sure project and app name is created or discovered with project name and app name specified in point no.2 "),(0,i.kt)("p",{parentName:"li"},"Once project and app name is created, Go to View dashboard -> Click on Tracing on lef side bar -> Click on view transaction -> Go to real time tab")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("b",null,"Note"),": ",(0,i.kt)("i",null," 'CAPTURE_BODY':'all' config should be present in apm agent code instrumentation for Trace to Log feature. "))))),(0,i.kt)("h3",{id:"script"},"Script"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install following requirements"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"pip install sf-elastic-apm==6.3.4 \npip install sf-apm-lib==0.1.1 \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add following code at start of script file to setup elastic apm client"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import elasticapm \nfrom sf_apm_lib.snappyflow import Snappyflow \n\nsf = Snappyflow() # Initialize Snappyflow. By default intialization will pick profileKey, projectName and appName from sfagent config.yaml.\n\n# Add below part to manually configure the initialization \nSF_PROJECT_NAME = '<Snappyflow Project Name>' \nSF_APP_NAME = '<Snappyflow App Name>' \nSF_PROFILE_KEY = '<Snappyflow Profile Key>' \nsf.init(SF_PROFILE_KEY, SF_PROJECT_NAME, SF_APP_NAME) \n# End of manual configuration\n\ntrace_config = sf.get_trace_config() # Returns trace config \nclient = elasticapm.Client(\n   service_name=\"<Service name> \",# Specify service name for tracing \n   server_url=trace_config['SFTRACE_SERVER_URL'], \n   verify_cert=trace_config['SFTRACE_VERIFY_SERVER_CERT'], \n   global_labels=trace_config['SFTRACE_GLOBAL_LABELS'] \n) \nelasticapm.instrument()  # Only call this once, as early as possible. \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Once instrumentation is completed we can create custom transaction and span"),(0,i.kt)("p",{parentName:"li"},"Example"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def main(): \n    sess = requests.Session() \n    for url in [ \'https://www.elastic.co\', \'https://benchmarks.elastic.co\' ]: \n        resp = sess.get(url) \n        time.sleep(1) \nclient.begin_transaction(transaction_type="script") \nmain() \n# Record an exception \ntry: \n    1/0 \nexcept ZeroDivisionError: \n    ident = client.capture_exception() \n    print ("Exception caught; reference is %s" % ident) \nclient.end_transaction(name=__name__, result="success") \n')),(0,i.kt)("p",{parentName:"li"},"Refer link to know more: "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://www.elastic.co/guide/en/apm/agent/python/master/instrumenting-custom-code.html"},"https://www.elastic.co/guide/en/apm/agent/python/master/instrumenting-custom-code.html")," ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Now run you script and test your trace in snappyflow server. "),(0,i.kt)("p",{parentName:"li"},"For viewing trace in snappyflow server make sure project and app name is created or discovered with project name and app name specified in point no.2 "),(0,i.kt)("p",{parentName:"li"},"Once project and app name is created, Go to View dashboard -> Click on Tracing on left side bar -> Click on view transaction -> Go to real time tab "))),(0,i.kt)("ol",{start:5},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Refer complete script: "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/snappyflow/tracing-reference-apps/blob/master/refapp-django/python_script_trace.py"},"https://github.com/snappyflow/tracing-reference-apps/blob/master/refapp-django/python_script_trace.py")," "))),(0,i.kt)("h3",{id:"celery"},"Celery"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install following requirements (Following example is based on redis broker)"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"pip install sf-elastic-apm==6.3.4 \npip install redis \npip install sf-apm-lib==0.1.1 \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add following code at start of the file where celery app is initialized to setup elastic apm client"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from sf_apm_lib.snappyflow import Snappyflow \nfrom elasticapm import Client, instrument \nfrom elasticapm.contrib.celery import register_exception_tracking, register_instrumentation \n\ninstrument() \n\ntry: \n   sf = Snappyflow() # Initialize Snappyflow. By default intialization will take profileKey, projectName and appName from sfagent config.yaml\n\n   # Add below part to manually configure the initialization \n   SF_PROJECT_NAME = '<SF_PROJECT_NAME>' # Replace with appropriate Snappyflow project name \n   SF_APP_NAME = '<SF_APP_NAME>' # Replace with appropriate Snappyflow app name \n   SF_PROFILE_KEY = '<SF_PROFILE_KEY>' # Replace Snappyflow Profile key\n   sf.init(SF_PROFILE_KEY, SF_PROJECT_NAME, SF_APP_NAME) \n   # End of manual configuration \n\n   SFTRACE_CONFIG = sf.get_trace_config() \n   apm_client = Client(\n      service_name= '<Service_Name>', # Specify service name for tracing\n      server_url= SFTRACE_CONFIG.get('SFTRACE_SERVER_URL'), \n      global_labels= SFTRACE_CONFIG.get('SFTRACE_GLOBAL_LABELS'), \n      verify_server_cert= SFTRACE_CONFIG.get('SFTRACE_VERIFY_SERVER_CERT')\n   )\n\n   register_exception_tracking(apm_client) \n   register_instrumentation(apm_client) \nexcept Exception as error: \n   print(\"Error while fetching snappyflow tracing configurations\", error) \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Once instrumentation is done and celery worker is running we can see trace for each celery task in Snappyflow server. "),(0,i.kt)("p",{parentName:"li"},"For viewing trace in snappyflow server make sure project and app name is created or discovered with project name and app name specified in point no.2 "),(0,i.kt)("p",{parentName:"li"},"Once project and app name is created, Go to View dashboard -> Click on Tracing on left side bar -> Click on view transaction -> Go to real time tab ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Refer complete code: "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/snappyflow/tracing-reference-apps/blob/master/ref-celery/tasks.py"},"https://github.com/snappyflow/tracing-reference-apps/blob/master/ref-celery/tasks.py")," "))),(0,i.kt)("h2",{id:"kubernetes"},"Kubernetes"),(0,i.kt)("h3",{id:"django-1"},"Django"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"sf-elastic-apm==6.3.4\nsf-apm-lib==0.1.1\n")),(0,i.kt)("p",{parentName:"li"},"entries in requirements.txt file and install these in your project environment "),(0,i.kt)("p",{parentName:"li"},"or "),(0,i.kt)("p",{parentName:"li"},"Install through CLI using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"pip install sf-elastic-apm==6.3.4 \npip install sf-apm-lib==0.1.1 \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add following entries in ",(0,i.kt)("inlineCode",{parentName:"p"},"settings.py")," "),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add import statement "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from sf_apm_lib.snappyflow import Snappyflow\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add following entry in ",(0,i.kt)("inlineCode",{parentName:"p"},"INSTALLED_APPS")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"'elasticapm.contrib.django'\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add following entry in ",(0,i.kt)("inlineCode",{parentName:"p"},"MIDDLEWARE")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"'elasticapm.contrib.django.middleware.TracingMiddleware'\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add this entry for instrumenting Django app"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"try: \n   sf = Snappyflow() # Initialize Snappyflow. By default intialization will take profileKey, projectName and appName from sfagent config.yaml \n   # Add below part to manually configure the initialization \n   SF_PROJECT_NAME = os.getenv('SF_PROJECT_NAME') \n   SF_APP_NAME = os.getenv('SF_APP_NAME') \n   SF_PROFILE_KEY = os.getenv('SF_PROFILE_KEY') \n   sf.init(SF_PROFILE_KEY, SF_PROJECT_NAME, SF_APP_NAME) \n   # End of manual configuration \n   SFTRACE_CONFIG = sf.get_trace_config()\n\n   # Start Trace to log feature section\n   # Add below line of code to enable Trace to log feature:\n   sfTraceConfig['SFTRACE_GLOBAL_LABELS'] += ',_tag_redact_body=true'\n   # Option Configs for trace to log\n   # Add below line to provide custom documentType (Default:\"user-input\"):\n   sfTraceConfig['SFTRACE_GLOBAL_LABELS'] += ',_tag_documentType=<document-type>'\n   # Add below line to provide destination index (Default:\"log\"):\n   sfTraceConfig['SFTRACE_GLOBAL_LABELS'] += ',_tag_IndexType=<index-type>' # Applicable values(log, metric)\n   # End trace to log section\n\n   ELASTIC_APM={ \n      'SERVICE_NAME': \"<Service name>\" , # Specify your service name for tracing \n      'SERVER_URL': SFTRACE_CONFIG.get('SFTRACE_SERVER_URL'), \n      'GLOBAL_LABELS': SFTRACE_CONFIG.get('SFTRACE_GLOBAL_LABELS'), \n      'VERIFY_SERVER_CERT': SFTRACE_CONFIG.get('SFTRACE_VERIFY_SERVER_CERT'), \n      'SPAN_FRAMES_MIN_DURATION': SFTRACE_CONFIG.get('SFTRACE_SPAN_FRAMES_MIN_DURATION'), \n      'STACK_TRACE_LIMIT': SFTRACE_CONFIG.get('SFTRACE_STACK_TRACE_LIMIT'), \n      'CAPTURE_SPAN_STACK_TRACES': SFTRACE_CONFIG.get('SFTRACE_CAPTURE_SPAN_STACK_TRACES'), \n      'DJANGO_TRANSACTION_NAME_FROM_ROUTE': True, \n      'CENTRAL_CONFIG': False, \n      'DEBUG': True,\n      'METRICS_INTERVAL': '0s'\n   } \nexcept Exception as error: \n   print(\"Error while fetching snappyflow tracing configurations\", error)\n"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Provide ",(0,i.kt)("inlineCode",{parentName:"p"},"SF_PROJECT_NAME"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SF_APP_NAME"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SF_PROFILE_KEY")," as an environment variables in Kubernetes deployment file. "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/"},"https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/")," "),(0,i.kt)("p",{parentName:"li"},"If deploying with helm provide above variables in ",(0,i.kt)("inlineCode",{parentName:"p"},"values.yaml")," and use them in deployment file of charts. "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://phoenixnap.com/kb/helm-environment-variables"},"https://phoenixnap.com/kb/helm-environment-variables")," ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Once your server is up and running you can check trace in Snappyflow Server. "),(0,i.kt)("p",{parentName:"li"},"For viewing trace in snappyflow server make sure project and app name is created or discovered with project name and app name specified in point no.2 "),(0,i.kt)("p",{parentName:"li"},"Once project and app name is created go to View dashboard -> Click on Tracing on lef side bar -> Click on view transaction -> Go to real time tab ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"For complete code refer sample app refer at: "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/snappyflow/tracing-reference-apps/tree/master/refapp-django"},"https://github.com/snappyflow/tracing-reference-apps/tree/master/refapp-django"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("b",null,"Note"),": ",(0,i.kt)("i",null," 'CAPTURE_BODY':'all' config should be present in apm agent code instrumentation for Trace to Log feature. "))),(0,i.kt)("h3",{id:"flask-1"},"Flask"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"sf-elastic-apm[flask]==6.3.4\nsf-apm-lib==0.1.1\n")),(0,i.kt)("p",{parentName:"li"},"entries in requirements.txt file and install these in your project environment "),(0,i.kt)("p",{parentName:"li"},"or "),(0,i.kt)("p",{parentName:"li"},"Install through CLI using "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-docker"},"RUN pip install sf-elastic-apm[flask]==6.3.4 \nRUN pip install sf-apm-lib==0.1.1 \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add following entries in app.py "),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add imports statement"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from elasticapm.contrib.flask import ElasticAPM \nfrom sf_apm_lib.snappyflow import Snappyflow \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Get trace config"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"sf = Snappyflow() # Initialize Snappyflow. By default intialization will take profileKey, projectName and appName from sfagent config.yaml\n\n# Add below part to manually configure the initialization \nSF_PROJECT_NAME = os.getenv('SF_PROJECT_NAME') \nSF_APP_NAME = os.getenv('SF_APP_NAME') \nSF_PROFILE_KEY = os.getenv('SF_PROFILE_KEY') \nsf.init(SF_PROFILE_KEY, SF_PROJECT_NAME, SF_APP_NAME) \n# End of manual configuration \n\nSFTRACE_CONFIG = sf.get_trace_config()\n\n# Start Trace to log feature section\n# Add below line of code to enable Trace to log feature:\nsfTraceConfig['SFTRACE_GLOBAL_LABELS'] += ',_tag_redact_body=true'\n# Option Configs for trace to log\n# Add below line to provide custom documentType (Default:\"user-input\"):\nsfTraceConfig['SFTRACE_GLOBAL_LABELS'] += ',_tag_documentType=<document-type>'\n# Add below line to provide destination index (Default:\"log\"):\nsfTraceConfig['SFTRACE_GLOBAL_LABELS'] += ',_tag_IndexType=<index-type>' # Applicable values(log, metric)\n# End trace to log section\n\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Initialize elastic apm and instrument it to flask app"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"app.config['ELASTIC_APM'] = { \n   'SERVICE_NAME': '<SERVICE_NAME>', # Specify your service name for tracing \n   'SERVER_URL': SFTRACE_CONFIG.get('SFTRACE_SERVER_URL'), \n   'GLOBAL_LABELS': SFTRACE_CONFIG.get('SFTRACE_GLOBAL_LABELS'), \n   'VERIFY_SERVER_CERT': SFTRACE_CONFIG.get('SFTRACE_VERIFY_SERVER_CERT'), \n   'SPAN_FRAMES_MIN_DURATION': SFTRACE_CONFIG.get('SFTRACE_SPAN_FRAMES_MIN_DURATION'), \n   'STACK_TRACE_LIMIT': SFTRACE_CONFIG.get('SFTRACE_STACK_TRACE_LIMIT'), \n   'CAPTURE_SPAN_STACK_TRACES': SFTRACE_CONFIG.get('SFTRACE_CAPTURE_SPAN_STACK_TRACES'), \n   'DEBUG': True,\n   'METRICS_INTERVAL': '0s'\n} \napm = ElasticAPM(app) \n"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Provide ",(0,i.kt)("inlineCode",{parentName:"p"},"SF_PROJECT_NAME"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SF_APP_NAME"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SF_PROFILE_KEY")," as an environment variables in Kubernetes deployment file. "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/"},"https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/")," "),(0,i.kt)("p",{parentName:"li"},"If deploying with helm provide above variables in values.yaml and use them in deployment file of charts. "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://phoenixnap.com/kb/helm-environment-variables"},"https://phoenixnap.com/kb/helm-environment-variables"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Once your server is up and running you can check trace in Snappyflow Server. "),(0,i.kt)("p",{parentName:"li"},"For viewing trace in snappyflow server make sure project and app name is created or discovered with project name and app name specified in point no.2 "),(0,i.kt)("p",{parentName:"li"},"Once project and app name is created, Go to View dashboard -> Click on Tracing on lef side bar -> Click on view transaction -> Go to real time tab ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("b",null,"Note"),": ",(0,i.kt)("i",null," 'CAPTURE_BODY':'all' config should be present in apm agent code instrumentation for Trace to Log feature. "))),(0,i.kt)("h3",{id:"celery-1"},"Celery"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install following requirements (Following example is based on redis broker)"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"pip install sf-elastic-apm==6.3.4 \npip install redis \npip install sf-apm-lib==0.1.1 \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add following code at start of the file where celery app is initialized to setup elastic apm client"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from sf_apm_lib.snappyflow import Snappyflow \nfrom elasticapm import Client, instrument \nfrom elasticapm.contrib.celery import register_exception_tracking, register_instrumentation \n\ninstrument()\n\ntry: \n   sf = Snappyflow() # Initialize Snappyflow. By default intialization will take profileKey, projectName and appName from sfagent config.yaml \n   \n   # Add below part to manually configure the initialization \n   SF_PROJECT_NAME = '<SF_PROJECT_NAME>' # Replace with appropriate Snappyflow project name \n   SF_APP_NAME = '<SF_APP_NAME>' # Replace with appropriate Snappyflow app name \n   SF_PROFILE_KEY = '<SF_PROFILE_KEY>' # Replace Snappyflow Profile key \n   sf.init(SF_PROFILE_KEY, SF_PROJECT_NAME, SF_APP_NAME) \n   # End of manual configuration \n\n   SFTRACE_CONFIG = sf.get_trace_config() \n   apm_client = Client(service_name= '<Service_Name>', # Specify service name for tracing\n      server_url= SFTRACE_CONFIG.get('SFTRACE_SERVER_URL'), \n      global_labels= SFTRACE_CONFIG.get('SFTRACE_GLOBAL_LABELS'), \n      verify_server_cert= SFTRACE_CONFIG.get('SFTRACE_VERIFY_SERVER_CERT')\n   )\n\n   register_exception_tracking(apm_client) \n   register_instrumentation(apm_client) \nexcept Exception as error: \n   print(\"Error while fetching snappyflow tracing configurations\", error) \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Once instrumentation is done and celery worker is running we can see trace for each celery task in Snappyflow server. "),(0,i.kt)("p",{parentName:"li"},"For viewing trace in snappyflow server make sure project and app name is created or discovered with project name and app name specified in point no.2 "),(0,i.kt)("p",{parentName:"li"},"Once project and app name is created, Go to View dashboard -> Click on Tracing on left side bar -> Click on view transaction -> Go to real time tab ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Refer complete code: "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/snappyflow/tracing-reference-apps/blob/master/ref-celery/tasks.py"},"https://github.com/snappyflow/tracing-reference-apps/blob/master/ref-celery/tasks.py")," "))),(0,i.kt)("h2",{id:"docker"},"Docker"),(0,i.kt)("h3",{id:"django-2"},"Django"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"sf-elastic-apm==6.3.4\nsf-apm-lib==0.1.1\n")),(0,i.kt)("p",{parentName:"li"},"entries in requirements.txt file and install these in your project environment "),(0,i.kt)("p",{parentName:"li"},"or "),(0,i.kt)("p",{parentName:"li"},"Install through CLI using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-docker"},"RUN pip install sf-elastic-apm==6.3.4 \nRUN pip install sf-apm-lib==0.1.1 \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add following entries in settings.py "),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add import statement "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from sf_apm_lib.snappyflow import Snappyflow \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add following entry in ",(0,i.kt)("inlineCode",{parentName:"p"},"INSTALLED_APPS")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"'elasticapm.contrib.django'  \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add following entry in ",(0,i.kt)("inlineCode",{parentName:"p"},"MIDDLEWARE")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"'elasticapm.contrib.django.middleware.TracingMiddleware'\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add this entry for instrumenting Django app"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"try: \n   sf = Snappyflow() # Initialize Snappyflow. By default intialization will take profileKey, projectName and appName from sfagent config.yaml \n\n   # Add below part to manually configure the initialization \n   SF_PROJECT_NAME = os.getenv('SF_PROJECT_NAME') \n   SF_APP_NAME = os.getenv('SF_APP_NAME') \n   SF_PROFILE_KEY = os.getenv('SF_PROFILE_KEY') \n   sf.init(SF_PROFILE_KEY, SF_PROJECT_NAME, SF_APP_NAME) \n   # End of manual configuration \n\n   SFTRACE_CONFIG = sf.get_trace_config()\n\n   # Start Trace to log feature section\n   # Add below line of code to enable Trace to log feature:\n   sfTraceConfig['SFTRACE_GLOBAL_LABELS'] += ',_tag_redact_body=true'\n   # Option Configs for trace to log\n   # Add below line to provide custom documentType (Default:\"user-input\"):\n   sfTraceConfig['SFTRACE_GLOBAL_LABELS'] += ',_tag_documentType=<document-type>'\n   # Add below line to provide destination index (Default:\"log\"):\n   sfTraceConfig['SFTRACE_GLOBAL_LABELS'] += ',_tag_IndexType=<index-type>' # Applicable values(log, metric)\n   # End trace to log section\n\n   ELASTIC_APM={ \n      'SERVICE_NAME': \"<Service name>\" , # Specify your service name for tracing \n      'SERVER_URL': SFTRACE_CONFIG.get('SFTRACE_SERVER_URL'), \n      'GLOBAL_LABELS': SFTRACE_CONFIG.get('SFTRACE_GLOBAL_LABELS'), \n      'VERIFY_SERVER_CERT': SFTRACE_CONFIG.get('SFTRACE_VERIFY_SERVER_CERT'), \n      'SPAN_FRAMES_MIN_DURATION': SFTRACE_CONFIG.get('SFTRACE_SPAN_FRAMES_MIN_DURATION'), \n      'STACK_TRACE_LIMIT': SFTRACE_CONFIG.get('SFTRACE_STACK_TRACE_LIMIT'), \n      'CAPTURE_SPAN_STACK_TRACES': SFTRACE_CONFIG.get('SFTRACE_CAPTURE_SPAN_STACK_TRACES'), \n      'DJANGO_TRANSACTION_NAME_FROM_ROUTE': True, \n      'CENTRAL_CONFIG': False, \n      'DEBUG': True,\n      'METRICS_INTERVAL': '0s'\n   } \nexcept Exception as error: \n   print(\"Error while fetching snappyflow tracing configurations\", error)\n"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Provide ",(0,i.kt)("inlineCode",{parentName:"p"},"SF_PROJECT_NAME"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SF_APP_NAME"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SF_PROFILE_KEY")," as an environment variables in ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," or docker stack deployment file or at command line when using docker run command for deployment.  "),(0,i.kt)("p",{parentName:"li"},"Eg: "),(0,i.kt)("p",{parentName:"li"},"Docker-compose and stack: ",(0,i.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/environment-variables/"},"https://docs.docker.com/compose/environment-variables/")," "),(0,i.kt)("p",{parentName:"li"},"Docker RUN: "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-docker"},"docker run -d -t -i -e SF_PROJECT_NAME='' \\  \n-e SF_APP_NAME='' \\ \n-e SF_PROFILE_KEY='' \\ \n-p 80:80 \\ \n--link redis:redis \\   \n--name <container_name> <dockerhub_id/image_name> \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Once your server is up and running you can check trace in Snappyflow Server. For viewing trace in snappyflow server make sure project and app name is created or discovered with project name and app name specified in point no.2 "),(0,i.kt)("p",{parentName:"li"},"Once project and app name is created go to View dashboard -> Click on Tracing on lef side bar -> Click on view transaction -> Go to real time tab ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"For complete code refer sample app refer at: "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/snappyflow/tracing-reference-apps/tree/master/refapp-django"},"https://github.com/snappyflow/tracing-reference-apps/tree/master/refapp-django")," ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("b",null,"Note"),": ",(0,i.kt)("i",null," 'CAPTURE_BODY':'all' config should be present in apm agent code instrumentation for Trace to Log feature. "))),(0,i.kt)("h3",{id:"flask-2"},"Flask"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"sf-elastic-apm[flask]==6.3.4\nsf-apm-lib==0.1.1\n")),(0,i.kt)("p",{parentName:"li"},"entries in requirements.txt file and install these in your project environment "),(0,i.kt)("p",{parentName:"li"},"or "),(0,i.kt)("p",{parentName:"li"},"Install through CLI using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-docker"},"RUN pip install sf-elastic-apm[flask]==6.3.4 \nRUN pip install sf-apm-lib==0.1.1 \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add following entries in app.py"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add imports statement"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"from elasticapm.contrib.flask import ElasticAPM \nfrom sf_apm_lib.snappyflow import Snappyflow \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Get trace config"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"sf = Snappyflow() # Initialize Snappyflow. By default intialization will take profileKey, projectName and appName from sfagent config.yaml\n\n# Add below part to manually configure the initialization \nSF_PROJECT_NAME = os.getenv('SF_PROJECT_NAME') \nSF_APP_NAME = os.getenv('SF_APP_NAME') \nSF_PROFILE_KEY = os.getenv('SF_PROFILE_KEY') \nsf.init(SF_PROFILE_KEY, SF_PROJECT_NAME, SF_APP_NAME) \n# End of manual configuration \n\nSFTRACE_CONFIG = sf.get_trace_config()\n\n# Start Trace to log feature section\n# Add below line of code to enable Trace to log feature:\nsfTraceConfig['SFTRACE_GLOBAL_LABELS'] += ',_tag_redact_body=true'\n# Option Configs for trace to log\n# Add below line to provide custom documentType (Default:\"user-input\"):\nsfTraceConfig['SFTRACE_GLOBAL_LABELS'] += ',_tag_documentType=<document-type>'\n# Add below line to provide destination index (Default:\"log\"):\nsfTraceConfig['SFTRACE_GLOBAL_LABELS'] += ',_tag_IndexType=<index-type>' # Applicable values(log, metric)\n# End trace to log section\n\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Initialize elastic apm and instrument it to flask app"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"app.config['ELASTIC_APM'] = { \n   'SERVICE_NAME': '<SERVICE_NAME>', # Specify your service name for tracing \n   'SERVER_URL': SFTRACE_CONFIG.get('SFTRACE_SERVER_URL'), \n   'GLOBAL_LABELS': SFTRACE_CONFIG.get('SFTRACE_GLOBAL_LABELS'), \n   'VERIFY_SERVER_CERT': SFTRACE_CONFIG.get('SFTRACE_VERIFY_SERVER_CERT'), \n   'SPAN_FRAMES_MIN_DURATION': SFTRACE_CONFIG.get('SFTRACE_SPAN_FRAMES_MIN_DURATION'), \n   'STACK_TRACE_LIMIT': SFTRACE_CONFIG.get('SFTRACE_STACK_TRACE_LIMIT'), \n   'CAPTURE_SPAN_STACK_TRACES': SFTRACE_CONFIG.get('SFTRACE_CAPTURE_SPAN_STACK_TRACES'), \n   'DEBUG': True,\n   'METRICS_INTERVAL': '0s'\n} \napm = ElasticAPM(app) \n"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Provide ",(0,i.kt)("inlineCode",{parentName:"p"},"SF_PROJECT_NAME"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SF_APP_NAME"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SF_PROFILE_KEY")," as an environment variables in docker-compose.yml or docker stack deployment file or at command line when using docker run command for deployment.  "),(0,i.kt)("p",{parentName:"li"},"Eg: "),(0,i.kt)("p",{parentName:"li"},"Docker-compose and stack: ",(0,i.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/environment-variables/"},"https://docs.docker.com/compose/environment-variables/")," "),(0,i.kt)("p",{parentName:"li"},"Docker run cli command: "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-docker"},"docker run -d -t -i -e SF_PROJECT_NAME='<SF_PROJECT_NAME>' \\  \n-e SF_APP_NAME='<SF_APP_NAME>' \\ \n-e SF_PROFILE_KEY='<snappyflow profile key>' \\ \n--name <container_name>  <dockerhub_id/image_name> \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Once your server is up and running you can check trace in Snappyflow Server. "),(0,i.kt)("p",{parentName:"li"},"For viewing trace in snappyflow server make sure project and app name is created or discovered with project name and app name specified in point no.2 "),(0,i.kt)("p",{parentName:"li"},"Once project and app name is created, Go to View dashboard -> Click on Tracing on lef side bar -> Click on view transaction -> Go to real time tab ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("b",null,"Note"),": ",(0,i.kt)("i",null," 'CAPTURE_BODY':'all' config should be present in apm agent code instrumentation for Trace to Log feature. "))),(0,i.kt)("h3",{id:"celery-2"},"Celery"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install following requirements (Following example is based on redis broker)"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"pip install sf-elastic-apm==6.3.4 \npip install redis \npip install sf-apm-lib==0.1.1 \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add following code at start of the file where celery app is initialized to setup elastic apm client"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from sf_apm_lib.snappyflow import Snappyflow \nfrom elasticapm import Client, instrument \nfrom elasticapm.contrib.celery import register_exception_tracking, register_instrumentation\n\ninstrument()\n\ntry: \n   sf = Snappyflow() # Initialize Snappyflow. By default intialization will take profileKey, projectName and appName from sfagent config.yaml\n\n   # Add below part to manually configure the initialization \n   SF_PROJECT_NAME = '<SF_PROJECT_NAME>' # Replace with appropriate Snappyflow project name \n   SF_APP_NAME = '<SF_APP_NAME>' # Replace with appropriate Snappyflow app name \n   SF_PROFILE_KEY = '<SF_PROFILE_KEY>' # Replace Snappyflow Profile key \n   sf.init(SF_PROFILE_KEY, SF_PROJECT_NAME, SF_APP_NAME) \n   # End of manual configuration \n\n   SFTRACE_CONFIG = sf.get_trace_config() \n   apm_client = Client(\n      service_name= '<Service_Name>', # Specify service name for tracing\n      server_url= SFTRACE_CONFIG.get('SFTRACE_SERVER_URL'), \n      global_labels= SFTRACE_CONFIG.get('SFTRACE_GLOBAL_LABELS'), \n      verify_server_cert= SFTRACE_CONFIG.get('SFTRACE_VERIFY_SERVER_CERT')\n   )\n\n   register_exception_tracking(apm_client) \n   register_instrumentation(apm_client) \nexcept Exception as error: \n   print(\"Error while fetching snappyflow tracing configurations\", error) \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Once instrumentation is done and celery worker is running we can see trace for each celery task in Snappyflow server. "),(0,i.kt)("p",{parentName:"li"},"For viewing trace in snappyflow server make sure project and app name is created or discovered with project name and app name specified in point no.2 "),(0,i.kt)("p",{parentName:"li"},"Once project and app name is created, Go to View dashboard -> Click on Tracing on left side bar -> Click on view transaction -> Go to real time tab ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Refer complete code: "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/snappyflow/tracing-reference-apps/blob/master/ref-celery/tasks.py"},"https://github.com/snappyflow/tracing-reference-apps/blob/master/ref-celery/tasks.py")," "))),(0,i.kt)("h2",{id:"ecs"},"ECS"),(0,i.kt)("h3",{id:"django-3"},"Django"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add  "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"sf-elastic-apm==6.3.4\nsf-apm-lib==0.1.1\n")),(0,i.kt)("p",{parentName:"li"},"entries in requirements.txt file and install these in your project environment "),(0,i.kt)("p",{parentName:"li"},"or "),(0,i.kt)("p",{parentName:"li"},"Install through CLI using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"pip install sf-elastic-apm==6.3.4 \npip install sf-apm-lib==0.1.1 \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add following entries in settings.py"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add import statement"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from sf_apm_lib.snappyflow import Snappyflow \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add following entry in ",(0,i.kt)("inlineCode",{parentName:"p"},"INSTALLED_APPS")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"'elasticapm.contrib.django' \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add following entry in ",(0,i.kt)("inlineCode",{parentName:"p"},"MIDDLEWARE")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"'elasticapm.contrib.django.middleware.TracingMiddleware'\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add this entry for instrumenting Django app"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"try: \n   sf = Snappyflow() # Initialize Snappyflow. By default intialization will take profileKey, projectName and appName from sfagent config.yaml\n   \n   # Add below part to manually configure the initialization \n   SF_PROJECT_NAME = os.getenv('SF_PROJECT_NAME') \n   SF_APP_NAME = os.getenv('SF_APP_NAME') \n   SF_PROFILE_KEY = os.getenv('SF_PROFILE_KEY') \n   sf.init(SF_PROFILE_KEY, SF_PROJECT_NAME, SF_APP_NAME) \n   # End of manual configuration\n\n   SFTRACE_CONFIG = sf.get_trace_config()\n\n   # Start Trace to log feature section\n   # Add below line of code to enable Trace to log feature:\n   sfTraceConfig['SFTRACE_GLOBAL_LABELS'] += ',_tag_redact_body=true'\n   # Option Configs for trace to log\n   # Add below line to provide custom documentType (Default:\"user-input\"):\n   sfTraceConfig['SFTRACE_GLOBAL_LABELS'] += ',_tag_documentType=<document-type>'\n   # Add below line to provide destination index (Default:\"log\"):\n   sfTraceConfig['SFTRACE_GLOBAL_LABELS'] += ',_tag_IndexType=<index-type>' # Applicable values(log, metric)\n   # End trace to log section\n\n   ELASTIC_APM={ \n      'SERVICE_NAME': \"<Service name>\" , # Specify your service name for tracing \n      'SERVER_URL': SFTRACE_CONFIG.get('SFTRACE_SERVER_URL'), \n      'GLOBAL_LABELS': SFTRACE_CONFIG.get('SFTRACE_GLOBAL_LABELS'), \n      'VERIFY_SERVER_CERT': SFTRACE_CONFIG.get('SFTRACE_VERIFY_SERVER_CERT'), \n      'SPAN_FRAMES_MIN_DURATION': SFTRACE_CONFIG.get('SFTRACE_SPAN_FRAMES_MIN_DURATION'), \n      'STACK_TRACE_LIMIT': SFTRACE_CONFIG.get('SFTRACE_STACK_TRACE_LIMIT'), \n      'CAPTURE_SPAN_STACK_TRACES': SFTRACE_CONFIG.get('SFTRACE_CAPTURE_SPAN_STACK_TRACES'), \n      'DJANGO_TRANSACTION_NAME_FROM_ROUTE': True, \n      'CENTRAL_CONFIG': False, \n      'DEBUG': True,\n      'METRICS_INTERVAL': '0s'\n   } \nexcept Exception as error: \n   print(\"Error while fetching snappyflow tracing configurations\", error) \n"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Provide ",(0,i.kt)("inlineCode",{parentName:"p"},"SF_PROJECT_NAME"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SF_APP_NAME"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SF_PROFILE_KEY")," as an environment variables in add container section of task definitions. "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html"},"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Once your server is up and running you can check trace in Snappyflow Server. "),(0,i.kt)("p",{parentName:"li"},"For viewing trace in snappyflow server make sure project and app name is created or discovered with project name and app name specified in point no.2 "),(0,i.kt)("p",{parentName:"li"},"Once project and app name is created go to View dashboard -> Click on Tracing on lef side bar -> Click on view transaction -> Go to real time tab ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"For complete code refer sample app refer at: "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/snappyflow/tracing-reference-apps/tree/master/refapp-django"},"https://github.com/snappyflow/tracing-reference-apps/tree/master/refapp-django")," ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("b",null,"Note"),": ",(0,i.kt)("i",null," 'CAPTURE_BODY':'all' config should be present in apm agent code instrumentation for Trace to Log feature. "))),(0,i.kt)("h3",{id:"flask-3"},"Flask"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"sf-elastic-apm[flask]==6.3.4\nsf-apm-lib==0.1.1\n")),(0,i.kt)("p",{parentName:"li"},"entries in requirements.txt file and install these in your project environment "),(0,i.kt)("p",{parentName:"li"},"or "),(0,i.kt)("p",{parentName:"li"},"Install through CLI using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-docker"},"RUN pip install sf-elastic-apm[flask]==6.3.4 \nRUN pip install sf-apm-lib==0.1.1 \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add following entries in ",(0,i.kt)("inlineCode",{parentName:"p"},"app.py")," "),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add imports statement"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from elasticapm.contrib.flask import ElasticAPM \nfrom sf_apm_lib.snappyflow import Snappyflow \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Get trace config"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"sf = Snappyflow() # Initialize Snappyflow. By default intialization will take profileKey, projectName and appName from sfagent config.yaml\n\n# Add below part to manually configure the initialization \nSF_PROJECT_NAME = os.getenv('SF_PROJECT_NAME') \nSF_APP_NAME = os.getenv('SF_APP_NAME') \nSF_PROFILE_KEY = os.getenv('SF_PROFILE_KEY') \nsf.init(SF_PROFILE_KEY, SF_PROJECT_NAME, SF_APP_NAME) \n# End of manual configuration\n\nSFTRACE_CONFIG = sf.get_trace_config()\n\n# Start Trace to log feature section\n# Add below line of code to enable Trace to log feature:\nsfTraceConfig['SFTRACE_GLOBAL_LABELS'] += ',_tag_redact_body=true'\n# Option Configs for trace to log\n# Add below line to provide custom documentType (Default:\"user-input\"):\nsfTraceConfig['SFTRACE_GLOBAL_LABELS'] += ',_tag_documentType=<document-type>'\n# Add below line to provide destination index (Default:\"log\"):\nsfTraceConfig['SFTRACE_GLOBAL_LABELS'] += ',_tag_IndexType=<index-type>' # Applicable values(log, metric)\n# End trace to log section\n")))))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"  ```\n")),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Initialize elastic apm and instrument it to flask app"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"app.config['ELASTIC_APM'] = { \n   'SERVICE_NAME': '<SERVICE_NAME>', # Specify your service name for tracing \n   'SERVER_URL': SFTRACE_CONFIG.get('SFTRACE_SERVER_URL'), \n   'GLOBAL_LABELS': SFTRACE_CONFIG.get('SFTRACE_GLOBAL_LABELS'), \n   'VERIFY_SERVER_CERT': SFTRACE_CONFIG.get('SFTRACE_VERIFY_SERVER_CERT'), \n   'SPAN_FRAMES_MIN_DURATION': SFTRACE_CONFIG.get('SFTRACE_SPAN_FRAMES_MIN_DURATION'), \n   'STACK_TRACE_LIMIT': SFTRACE_CONFIG.get('SFTRACE_STACK_TRACE_LIMIT'), \n   'CAPTURE_SPAN_STACK_TRACES': SFTRACE_CONFIG.get('SFTRACE_CAPTURE_SPAN_STACK_TRACES'), \n   'DEBUG': True,\n   'METRICS_INTERVAL': '0s'\n} \napm = ElasticAPM(app)\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Provide ",(0,i.kt)("inlineCode",{parentName:"p"},"SF_PROJECT_NAME"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SF_APP_NAME"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SF_PROFILE_KEY")," as an environment variables in add container section of task definitions. "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html"},"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html")," ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Once your server is up and running you can check trace in Snappyflow Server. "),(0,i.kt)("p",{parentName:"li"},"For viewing trace in snappyflow server make sure project and app name is created or discovered with project name and app name specified in point no.2 "),(0,i.kt)("p",{parentName:"li"},"Once project and app name is created, Go to View dashboard -> Click on Tracing on lef side bar -> Click on view transaction -> Go to real time tab ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("b",null,"Note"),": ",(0,i.kt)("i",null," 'CAPTURE_BODY':'all' config should be present in apm agent code instrumentation for Trace to Log feature. "))),(0,i.kt)("h3",{id:"celery-3"},"Celery"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install following requirements (Following example is based on redis broker)"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"pip install sf-elastic-apm==6.3.4 \npip install redis \npip install sf-apm-lib==0.1.1 \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add following code at start of the file where celery app is initialized to setup elastic apm client"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from sf_apm_lib.snappyflow import Snappyflow \nfrom elasticapm import Client, instrument \nfrom elasticapm.contrib.celery import register_exception_tracking, register_instrumentation\n\ninstrument()\n\ntry: \n   sf = Snappyflow() # Initialize Snappyflow. By default intialization will take profileKey, projectName and appName from sfagent config.yaml\n\n   # Add below part to manually configure the initialization \n   SF_PROJECT_NAME = '<SF_PROJECT_NAME>' # Replace with appropriate Snappyflow project name \n   SF_APP_NAME = '<SF_APP_NAME>' # Replace with appropriate Snappyflow app name \n   SF_PROFILE_KEY = '<SF_PROFILE_KEY>' # Replace Snappyflow Profile key \n   sf.init(SF_PROFILE_KEY, SF_PROJECT_NAME, SF_APP_NAME) \n   # End of manual configuration\n\n   SFTRACE_CONFIG = sf.get_trace_config() \n   apm_client = Client(\n         service_name= '<Service_Name>', # Specify service name for tracing\n         server_url= SFTRACE_CONFIG.get('SFTRACE_SERVER_URL'), \n         global_labels= SFTRACE_CONFIG.get('SFTRACE_GLOBAL_LABELS'), \n         verify_server_cert= SFTRACE_CONFIG.get('SFTRACE_VERIFY_SERVER_CERT')\n   )\n\n   register_exception_tracking(apm_client) \n   register_instrumentation(apm_client) \nexcept Exception as error: \n   print(\"Error while fetching snappyflow tracing configurations\", error) \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Once instrumentation is done and celery worker is running we can see trace for each celery task in Snappyflow server. "),(0,i.kt)("p",{parentName:"li"},"For viewing trace in snappyflow server make sure project and app name is created or discovered with project name and app name specified in point no.2 "),(0,i.kt)("p",{parentName:"li"},"Once project and app name is created, Go to View dashboard -> Click on Tracing on left side bar -> Click on view transaction -> Go to real time tab ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Refer complete code: "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/snappyflow/tracing-reference-apps/blob/master/ref-celery/tasks.py"},"https://github.com/snappyflow/tracing-reference-apps/blob/master/ref-celery/tasks.py")," "))),(0,i.kt)("h2",{id:"aws-lambda"},"AWS Lambda"),(0,i.kt)("h3",{id:"script-1"},"Script"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add these python libraries in requirements.txt file. Follow the AWS lambda doc on adding runtime dependency to lambda function. "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"sf-apm-lib==0.1.1 \nsf-elastic-apm==6.3.4 \n")),(0,i.kt)("p",{parentName:"li"},"Ref: ",(0,i.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/lambda/latest/dg/python-package-create.html#python-package-create-with-dependency"},"https://docs.aws.amazon.com/lambda/latest/dg/python-package-create.html#python-package-create-with-dependency")," ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Instrument lambda function to enable tracing.  "),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Import Libraries"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import elasticapm \nfrom sf_apm_lib.snappyflow import Snappyflow \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add code to get SnappyFlow Trace config, outside lambda handler method. "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"sf = Snappyflow()\nSF_PROJECT_NAME = os.environ['SF_PROJECT_NAME'] \nSF_APP_NAME = os.environ['SF_APP_NAME'] \nSF_PROFILE_KEY = os.environ['SF_PROFILE_KEY'] \nsf.init(SF_PROFILE_KEY, SF_PROJECT_NAME, SF_APP_NAME) \ntrace_config = snappyflow.get_trace_config() \n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add custom instrumentation in lambda handler function"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def lambda_handler(event, context): \n   client = elasticapm.Client(service_name=\"<SERVICE_NAME_CHANGEME>\", \n      server_url=trace_config['SFTRACE_SERVER_URL'], \n      verify_cert=trace_config['SFTRACE_VERIFY_SERVER_CERT'], \n      global_labels=trace_config['SFTRACE_GLOBAL_LABELS'] \n      ) \n   elasticapm.instrument()  \n   client.begin_transaction(transaction_type=\"script\") \n   # DO SOME WORK. No return statements. \n   client.end_transaction(name=__name__, result=\"success\") \n   # RETURN STATEMENT e.g. return response \n"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Deploy the Lambda function. Follow README to test sample app "),(0,i.kt)("p",{parentName:"li"},"Sample code for reference: "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/upendrasahu/aws-lambda-python-tracing-sample"},"https://github.com/upendrasahu/aws-lambda-python-tracing-sample")," ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Configure Lambda function before trigger/invoke. "),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Add the environment variable\u202f",(0,i.kt)("inlineCode",{parentName:"li"},"SF_PROFILE_KEY"),"\u202fand set the value to your\u202fprofile key copied from SnappyFlow. "),(0,i.kt)("li",{parentName:"ol"},"Add environment variables ",(0,i.kt)("inlineCode",{parentName:"li"},"SF_APP_NAME")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"SF_PROJECT_NAME")," with appropriate values.\n",(0,i.kt)("img",{src:a(1183).Z}))))),(0,i.kt)("h2",{id:"log-correlation"},"Log Correlation"),(0,i.kt)("h3",{id:"for-enabling-log-correlation-follow-below-instructions"},"For enabling log correlation, follow below instructions"),(0,i.kt)("h3",{id:"django-4"},"Django"),(0,i.kt)("p",null,"a.\tAdd import statement in settings.py"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from elasticapm.handlers.logging import Formatter\n")),(0,i.kt)("p",null,"b.\tAdd following logging configuration in settings.py."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': True, // Disable existing logger\n    'formatters': {\n       'elastic': { // Add elastic formatter\n            'format': '[%(asctime)s] [%(levelname)s] [%(message)s]',\n            'class': 'elasticapm.handlers.logging.Formatter',\n            'datefmt': \"%d/%b/%Y %H:%M:%S\"\n        }\n    },\n    'handlers': {\n        'elasticapm_log': {\n            'level': 'INFO',\n            'class': 'logging.handlers.RotatingFileHandler',\n            'filename': '/var/log/trace/django.log', //specify you log file path\n            'formatter': 'elastic'\n        }\n    },\n    'loggers': {\n        'elasticapm': {\n            'handlers': ['elasticapm_log'],\n            'level': 'INFO',\n        }\n    }\n}\n")),(0,i.kt)("p",null,"c. Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import logging\nlog = logging.getLogger('elasticapm')\n\nclass ExampleView(APIView):\n   def get(self, request):\n      log.info('Get API called')\n\n")),(0,i.kt)("p",null,"Refer code: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/snappyflow/tracing-reference-apps/blob/master/refapp-django"},"https://github.com/snappyflow/tracing-reference-apps/blob/master/refapp-django")),(0,i.kt)("h3",{id:"flask-4"},"Flask"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Add following code in app.py after import statements to set logger configuration")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import logging\nfrom elasticapm.handlers.logging import Formatter\nfh = logging.FileHandler('/var/log/trace/flask.log') \n\n# we imported a custom Formatter from the Python Agent earlier \nformatter = Formatter(\"[%(asctime)s] [%(levelname)s] [%(message)s]\", \"%d/%b/%Y %H:%M:%S\") \nfh.setFormatter(formatter) \nlogging.getLogger().addHandler(fh)\n\n# Once logging is configured get log object using following code  \nlog = logging.getLogger()\nlog.setLevel('INFO')\n\n@app.route('/')\ndef home():\n   log.info('Home API called')\n   return 'Welcome to Home'\n")),(0,i.kt)("p",null,"Refer code: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/snappyflow/tracing-reference-apps/blob/master/refapp-flask/app.py"},"https://github.com/snappyflow/tracing-reference-apps/blob/master/refapp-flask/app.py")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Now once server is up, we can see the trace info embedded inside statement of log file."),(0,i.kt)("p",null,"To send log correlation data to snappyflow server install sfagent and create config file. Refer: ",(0,i.kt)("a",{parentName:"p",href:"https://docs.snappyflow.io/docs/Integrations/os/linux/sfagent_linux"},"https://docs.snappyflow.io/docs/Integrations/os/linux/sfagent_linux")),(0,i.kt)("p",null,"Add elasticApmLog plugin to sfagent config.yaml and restart sfagent service.\nEg. Config.yaml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"key: <SF_PROFILE_KEY>\ntags:\n  Name: <any-name>\n  appName: <SF_APP_NAME>\n  projectName: <SF_PROJECT_NAME>\nlogging:\n  plugins:\n    - name: elasticApmTraceLog\n      enabled: true\n      config:\n        log_level:\n          - error\n          - warning\n          - info\n        log_path: /var/log/trace/ntrace.log  # Your app log file path\n")),(0,i.kt)("p",null,"For viewing trace and logs in Snappyflow server make sure project and app name is created or discovered.\nOnce project and app name is created."),(0,i.kt)("p",null,"Go to: View App dashboard -> Click on Tracing on left side bar   -> Click on view transaction -> Go to real time tab\nThen click on any trace and go to logs tab to see the correlated logs to trace."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# Note: To get trace in snappyflow server we need log entries to adhere following log format:\n<date in following format>\n[10/Aug/2021 10:51:16] [<log_level>] [<message>] | elasticapm transaction.id=<transaction_id> trace.id=<trace_id> span.id=<Snap id>\n")))}_.isMDXComponent=!0},1183:function(e,n,a){n.Z=a.p+"assets/images/python_aws_picture1-a93940fbdad6f4d4720a7f0237592ae3.png"}}]);