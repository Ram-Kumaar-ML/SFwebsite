"use strict";(self.webpackChunksf_documentation=self.webpackChunksf_documentation||[]).push([[8623],{3905:function(e,r,t){t.d(r,{Zo:function(){return f},kt:function(){return g}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=n.createContext({}),s=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},f=function(e){var r=s(e.components);return n.createElement(p.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},c=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,l=e.originalType,p=e.parentName,f=i(e,["components","mdxType","originalType","parentName"]),c=s(t),g=o,m=c["".concat(p,".").concat(g)]||c[g]||u[g]||l;return t?n.createElement(m,a(a({ref:r},f),{},{components:t})):n.createElement(m,a({ref:r},f))}));function g(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var l=t.length,a=new Array(l);a[0]=c;var i={};for(var p in r)hasOwnProperty.call(r,p)&&(i[p]=r[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var s=2;s<l;s++)a[s]=t[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},2816:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return f},default:function(){return c}});var n=t(7462),o=t(3366),l=(t(7294),t(3905)),a=["components"],i={},p="SnappyFlow GO Profiler",s={unversionedId:"New_pages/go_profiler",id:"New_pages/go_profiler",isDocsHomePage:!1,title:"SnappyFlow GO Profiler",description:"sf-go-profiler enables collecting supported profiles types by golang along with runtime metrics",source:"@site/docs/New_pages/go_profiler.md",sourceDirName:"New_pages",slug:"/New_pages/go_profiler",permalink:"/docs/New_pages/go_profiler",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/New_pages/go_profiler.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"sfAgent Installation in Linux",permalink:"/docs/sfAgent_Linux/sfAgent_installation_in_Linux"},next:{title:"Monitoring Windows Instances",permalink:"/docs/New_pages/sfagent_windows"}},f=[{value:"getting started",id:"getting-started",children:[]}],u={toc:f};function c(e){var r=e.components,t=(0,o.Z)(e,a);return(0,l.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"snappyflow-go-profiler"},"SnappyFlow GO Profiler"),(0,l.kt)("p",null,"sf-go-profiler enables collecting supported profiles types by golang along with runtime metrics\nand sends them to snappyflow-apm for further visualization and analysis."),(0,l.kt)("p",null,"supported profiles: cpu, heap, block, mutex, goroutine, threadcreate"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"cpu")," and ",(0,l.kt)("strong",{parentName:"p"},"heap")," profiles are enabled always other types can be enabled as required."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"godoc"),": ",(0,l.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/snappyflow/sf-go-profiler/profiler"},"https://pkg.go.dev/github.com/snappyflow/sf-go-profiler/profiler"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"sample code"),": ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/snappyflow/sf-go-profiler/tree/main/example/main.go"},"https://github.com/snappyflow/sf-go-profiler/tree/main/example/main.go")))),(0,l.kt)("h2",{id:"getting-started"},"getting started"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"pre-requisite")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"install and configure snappyflow agent on vm or as a sidecar in the container, as it is required to send data to snappyflow-apm")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"run below command to download or update sf-go-profiler package in your current project."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"go get -u -v github.com/snappyflow/sf-go-profiler/profiler\n"))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"simple example")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'import "github.com/snappyflow/sf-go-profiler/profiler"\n\nmain(){\n    profile := profiler.NewProfilerConfig("server")\n    profile.Start()\n    defer profile.Stop()\n    // rest of the application code\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"profiling can conditionally enabled when required using golang flags")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "github.com/snappyflow/sf-go-profiler/profiler"\n    "flag"\n)\n\nmain(){\n    enableprofile := flag.Bool("profile",false,"enable profiler")\n    if *enableprofile {\n        profile := profiler.NewProfilerConfig("server")\n        // below line disables collection of go runtime metrics\n        // profile.DisableRuntimeMetrics()\n        // below line disables profiling\n        // profile.DisableProfiles()\n        profile.Start()\n        defer profile.Stop()\n    }\n    // rest of the application code\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"runtime metrics can be disable by calling ",(0,l.kt)("strong",{parentName:"li"},"DisableRuntimeMetrics()")," similarly profiling can be disabled by calling ",(0,l.kt)("strong",{parentName:"li"},"DisableProfiles()")," on profile config object.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'    profile := profiler.NewProfilerConfig("server")\n    // below line disables collection of go runtime metrics\n    profile.DisableRuntimeMetrics()\n    // below line disables profiling\n    profile.DisableProfiles()\n    profile.Start()\n    defer profile.Stop()\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"enable other supported profiles as required")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"    // enable block profile and set given block profile rate\n    profile.EnableBlockProfile(100)\n    // enable mutex profile and set given mutex profile fraction\n    profile.EnableMutexProfile(1000)\n    // enable goroutine profile\n    profile.EnableGoRoutineProfile()\n    // enable threadcreate profile\n    profile.EnableThreadCreateProfile()\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"since only heap and cpu profiles are enabled by default, all supported profiles can be enabled by call to function ",(0,l.kt)("strong",{parentName:"li"},"EnableAllProfiles()"),",\nthis sets block profile rate to ",(0,l.kt)("strong",{parentName:"li"},"DefaultBlockProfileRate")," and mutex profile fraction to ",(0,l.kt)("strong",{parentName:"li"},"DefaultMutexProfileFraction"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"    // enable all supported profiles\n    profile.EnableAllProfiles()\n")))}c.isMDXComponent=!0}}]);